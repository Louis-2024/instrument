
MusicalInstrument.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd8  08007cd8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ce0  08007ce0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200000b0  08007d98  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08007d98  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afc7  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327e  00000000  00000000  0003b0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  0003e328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cc6  00000000  00000000  00040c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193f5  00000000  00000000  000688ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fabdb  00000000  00000000  00081ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0017c8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc4  00000000  00000000  0017c984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00182748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007428 	.word	0x08007428

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08007428 	.word	0x08007428

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	20d4      	movs	r0, #212	; 0xd4
 8000dc2:	f005 fb6b 	bl	800649c <SENSOR_IO_Read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000dd6:	7bba      	ldrb	r2, [r7, #14]
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	461a      	mov	r2, r3
 8000de2:	2110      	movs	r1, #16
 8000de4:	20d4      	movs	r0, #212	; 0xd4
 8000de6:	f005 fb3f 	bl	8006468 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000dea:	2112      	movs	r1, #18
 8000dec:	20d4      	movs	r0, #212	; 0xd4
 8000dee:	f005 fb55 	bl	800649c <SENSOR_IO_Read>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000e04:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000e06:	7bba      	ldrb	r2, [r7, #14]
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	461a      	mov	r2, r3
 8000e12:	2112      	movs	r1, #18
 8000e14:	20d4      	movs	r0, #212	; 0xd4
 8000e16:	f005 fb27 	bl	8006468 <SENSOR_IO_Write>
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	20d4      	movs	r0, #212	; 0xd4
 8000e30:	f005 fb34 	bl	800649c <SENSOR_IO_Read>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	461a      	mov	r2, r3
 8000e44:	2110      	movs	r1, #16
 8000e46:	20d4      	movs	r0, #212	; 0xd4
 8000e48:	f005 fb0e 	bl	8006468 <SENSOR_IO_Write>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000e58:	f005 fafc 	bl	8006454 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	20d4      	movs	r0, #212	; 0xd4
 8000e60:	f005 fb1c 	bl	800649c <SENSOR_IO_Read>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000e78:	2115      	movs	r1, #21
 8000e7a:	20d4      	movs	r0, #212	; 0xd4
 8000e7c:	f005 fb0e 	bl	800649c <SENSOR_IO_Read>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f023 0310 	bic.w	r3, r3, #16
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2115      	movs	r1, #21
 8000ea0:	20d4      	movs	r0, #212	; 0xd4
 8000ea2:	f005 fae1 	bl	8006468 <SENSOR_IO_Write>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	20d4      	movs	r0, #212	; 0xd4
 8000eca:	f005 fae7 	bl	800649c <SENSOR_IO_Read>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000ed2:	f107 0208 	add.w	r2, r7, #8
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	2128      	movs	r1, #40	; 0x28
 8000eda:	20d4      	movs	r0, #212	; 0xd4
 8000edc:	f005 fafc 	bl	80064d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	77fb      	strb	r3, [r7, #31]
 8000ee4:	e01c      	b.n	8000f20 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000ee6:	7ffb      	ldrb	r3, [r7, #31]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	3301      	adds	r3, #1
 8000eec:	3320      	adds	r3, #32
 8000eee:	443b      	add	r3, r7
 8000ef0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	7ffb      	ldrb	r3, [r7, #31]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	3320      	adds	r3, #32
 8000f00:	443b      	add	r3, r7
 8000f02:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	7ffb      	ldrb	r3, [r7, #31]
 8000f0e:	b212      	sxth	r2, r2
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	3320      	adds	r3, #32
 8000f14:	443b      	add	r3, r7
 8000f16:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	77fb      	strb	r3, [r7, #31]
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d9df      	bls.n	8000ee6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b0c      	cmp	r3, #12
 8000f2e:	d829      	bhi.n	8000f84 <LSM6DSL_AccReadXYZ+0xd4>
 8000f30:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <LSM6DSL_AccReadXYZ+0x88>)
 8000f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f36:	bf00      	nop
 8000f38:	08000f6d 	.word	0x08000f6d
 8000f3c:	08000f85 	.word	0x08000f85
 8000f40:	08000f85 	.word	0x08000f85
 8000f44:	08000f85 	.word	0x08000f85
 8000f48:	08000f7f 	.word	0x08000f7f
 8000f4c:	08000f85 	.word	0x08000f85
 8000f50:	08000f85 	.word	0x08000f85
 8000f54:	08000f85 	.word	0x08000f85
 8000f58:	08000f73 	.word	0x08000f73
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	08000f85 	.word	0x08000f85
 8000f64:	08000f85 	.word	0x08000f85
 8000f68:	08000f79 	.word	0x08000f79
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <LSM6DSL_AccReadXYZ+0x120>)
 8000f6e:	61bb      	str	r3, [r7, #24]
    break;
 8000f70:	e008      	b.n	8000f84 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <LSM6DSL_AccReadXYZ+0x124>)
 8000f74:	61bb      	str	r3, [r7, #24]
    break;
 8000f76:	e005      	b.n	8000f84 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <LSM6DSL_AccReadXYZ+0x128>)
 8000f7a:	61bb      	str	r3, [r7, #24]
    break;
 8000f7c:	e002      	b.n	8000f84 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <LSM6DSL_AccReadXYZ+0x12c>)
 8000f80:	61bb      	str	r3, [r7, #24]
    break;    
 8000f82:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e01a      	b.n	8000fc0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	3320      	adds	r3, #32
 8000f90:	443b      	add	r3, r7
 8000f92:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa6:	7ffb      	ldrb	r3, [r7, #31]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb2:	ee17 2a90 	vmov	r2, s15
 8000fb6:	b212      	sxth	r2, r2
 8000fb8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	77fb      	strb	r3, [r7, #31]
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d9e1      	bls.n	8000f8a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	3d79db23 	.word	0x3d79db23
 8000fd4:	3df9db23 	.word	0x3df9db23
 8000fd8:	3e79db23 	.word	0x3e79db23
 8000fdc:	3ef9db23 	.word	0x3ef9db23

08000fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 f960 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 f80d 	bl	8001010 <HAL_InitTick>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	e001      	b.n	8001006 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001002:	f005 fadd 	bl	80065c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001006:	79fb      	ldrb	r3, [r7, #7]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_InitTick+0x6c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d023      	beq.n	800106c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_InitTick+0x70>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_InitTick+0x6c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f96d 	bl	800131a <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10f      	bne.n	8001066 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d809      	bhi.n	8001060 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001054:	f000 f937 	bl	80012c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_InitTick+0x74>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e007      	b.n	8001070 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e004      	b.n	8001070 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e001      	b.n	8001070 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000038 	.word	0x20000038
 8001080:	20000048 	.word	0x20000048
 8001084:	20000034 	.word	0x20000034

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000038 	.word	0x20000038
 80010ac:	200000cc 	.word	0x200000cc

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200000cc 	.word	0x200000cc

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000038 	.word	0x20000038

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff29 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff3e 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff8e 	bl	8001204 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5d 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff31 	bl	8001174 <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e014      	b.n	800136e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f005 f957 	bl	8006608 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2202      	movs	r2, #2
 800135e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	795b      	ldrb	r3, [r3, #5]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_DAC_Start+0x16>
 8001388:	2302      	movs	r3, #2
 800138a:	e03b      	b.n	8001404 <HAL_DAC_Start+0x8e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2201      	movs	r2, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10f      	bne.n	80013d6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d118      	bne.n	80013f6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0201 	orr.w	r2, r2, #1
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	e00f      	b.n	80013f6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013e4:	d107      	bne.n	80013f6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0202 	orr.w	r2, r2, #2
 80013f4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	795b      	ldrb	r3, [r3, #5]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_DAC_Start_DMA+0x1e>
 800142a:	2302      	movs	r3, #2
 800142c:	e0ab      	b.n	8001586 <HAL_DAC_Start_DMA+0x176>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2202      	movs	r2, #2
 8001438:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d12f      	bne.n	80014a0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_DAC_Start_DMA+0x180>)
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_DAC_Start_DMA+0x184>)
 800144e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_DAC_Start_DMA+0x188>)
 8001456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001466:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d013      	beq.n	8001496 <HAL_DAC_Start_DMA+0x86>
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d845      	bhi.n	8001500 <HAL_DAC_Start_DMA+0xf0>
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_DAC_Start_DMA+0x72>
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d005      	beq.n	800148c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001480:	e03e      	b.n	8001500 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3308      	adds	r3, #8
 8001488:	613b      	str	r3, [r7, #16]
        break;
 800148a:	e03c      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	330c      	adds	r3, #12
 8001492:	613b      	str	r3, [r7, #16]
        break;
 8001494:	e037      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3310      	adds	r3, #16
 800149c:	613b      	str	r3, [r7, #16]
        break;
 800149e:	e032      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a3d      	ldr	r2, [pc, #244]	; (800159c <HAL_DAC_Start_DMA+0x18c>)
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a3c      	ldr	r2, [pc, #240]	; (80015a0 <HAL_DAC_Start_DMA+0x190>)
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a3b      	ldr	r2, [pc, #236]	; (80015a4 <HAL_DAC_Start_DMA+0x194>)
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d013      	beq.n	80014f6 <HAL_DAC_Start_DMA+0xe6>
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d817      	bhi.n	8001504 <HAL_DAC_Start_DMA+0xf4>
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_DAC_Start_DMA+0xd2>
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d005      	beq.n	80014ec <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80014e0:	e010      	b.n	8001504 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3314      	adds	r3, #20
 80014e8:	613b      	str	r3, [r7, #16]
        break;
 80014ea:	e00c      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3318      	adds	r3, #24
 80014f2:	613b      	str	r3, [r7, #16]
        break;
 80014f4:	e007      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	331c      	adds	r3, #28
 80014fc:	613b      	str	r3, [r7, #16]
        break;
 80014fe:	e002      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001504:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800151a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6898      	ldr	r0, [r3, #8]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	f000 faff 	bl	8001b28 <HAL_DMA_Start_IT>
 800152a:	4603      	mov	r3, r0
 800152c:	75fb      	strb	r3, [r7, #23]
 800152e:	e010      	b.n	8001552 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800153e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	68d8      	ldr	r0, [r3, #12]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	f000 faed 	bl	8001b28 <HAL_DMA_Start_IT>
 800154e:	4603      	mov	r3, r0
 8001550:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	2201      	movs	r2, #1
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e005      	b.n	8001584 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001584:	7dfb      	ldrb	r3, [r7, #23]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	080018a3 	.word	0x080018a3
 8001594:	080018c5 	.word	0x080018c5
 8001598:	080018e1 	.word	0x080018e1
 800159c:	0800194b 	.word	0x0800194b
 80015a0:	0800196d 	.word	0x0800196d
 80015a4:	08001989 	.word	0x08001989

080015a8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2201      	movs	r2, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 faf6 	bl	8001be8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e00c      	b.n	8001628 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fae8 	bl	8001be8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001626:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b088      	sub	sp, #32
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	795b      	ldrb	r3, [r3, #5]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_DAC_ConfigChannel+0x1c>
 8001686:	2302      	movs	r3, #2
 8001688:	e107      	b.n	800189a <HAL_DAC_ConfigChannel+0x22c>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2202      	movs	r2, #2
 8001694:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d174      	bne.n	8001788 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800169e:	f7ff fd07 	bl	80010b0 <HAL_GetTick>
 80016a2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d134      	bne.n	8001714 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016aa:	e011      	b.n	80016d0 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016ac:	f7ff fd00 	bl	80010b0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d90a      	bls.n	80016d0 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f043 0208 	orr.w	r2, r3, #8
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2203      	movs	r2, #3
 80016ca:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0e4      	b.n	800189a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1e6      	bne.n	80016ac <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fcf2 	bl	80010c8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	6992      	ldr	r2, [r2, #24]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
 80016ee:	e01e      	b.n	800172e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016f0:	f7ff fcde 	bl	80010b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d90a      	bls.n	8001714 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f043 0208 	orr.w	r2, r3, #8
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2203      	movs	r2, #3
 800170e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0c2      	b.n	800189a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171a:	2b00      	cmp	r3, #0
 800171c:	dbe8      	blt.n	80016f0 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff fcd2 	bl	80010c8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	6992      	ldr	r2, [r2, #24]
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0310 	and.w	r3, r3, #16
 800173a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	ea02 0103 	and.w	r1, r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	69da      	ldr	r2, [r3, #28]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	21ff      	movs	r1, #255	; 0xff
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	ea02 0103 	and.w	r1, r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d11d      	bne.n	80017cc <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	221f      	movs	r2, #31
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43da      	mvns	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	22c0      	movs	r2, #192	; 0xc0
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff febe 	bl	8001632 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	711a      	strb	r2, [r3, #4]
}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff feb7 	bl	8001646 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f043 0204 	orr.w	r2, r3, #4
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f7ff fead 	bl	800165a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	711a      	strb	r2, [r3, #4]
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7ff ffd8 	bl	800190e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	711a      	strb	r2, [r3, #4]
}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff ffd1 	bl	8001922 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	f043 0204 	orr.w	r2, r3, #4
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff ffc7 	bl	8001936 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	711a      	strb	r2, [r3, #4]
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e098      	b.n	8001afc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <HAL_DMA_Init+0x150>)
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d80f      	bhi.n	80019f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_DMA_Init+0x154>)
 80019de:	4413      	add	r3, r2
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_DMA_Init+0x158>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	009a      	lsls	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a48      	ldr	r2, [pc, #288]	; (8001b14 <HAL_DMA_Init+0x15c>)
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <HAL_DMA_Init+0x160>)
 80019fe:	4413      	add	r3, r2
 8001a00:	4a43      	ldr	r2, [pc, #268]	; (8001b10 <HAL_DMA_Init+0x158>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	009a      	lsls	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <HAL_DMA_Init+0x164>)
 8001a12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6e:	d039      	beq.n	8001ae4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_DMA_Init+0x15c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11a      	bne.n	8001ab0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_DMA_Init+0x168>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 031c 	and.w	r3, r3, #28
 8001a86:	210f      	movs	r1, #15
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4924      	ldr	r1, [pc, #144]	; (8001b20 <HAL_DMA_Init+0x168>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_DMA_Init+0x168>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f003 031c 	and.w	r3, r3, #28
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	491d      	ldr	r1, [pc, #116]	; (8001b20 <HAL_DMA_Init+0x168>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]
 8001aae:	e019      	b.n	8001ae4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_DMA_Init+0x16c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f003 031c 	and.w	r3, r3, #28
 8001abc:	210f      	movs	r1, #15
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4917      	ldr	r1, [pc, #92]	; (8001b24 <HAL_DMA_Init+0x16c>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_DMA_Init+0x16c>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f003 031c 	and.w	r3, r3, #28
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	4911      	ldr	r1, [pc, #68]	; (8001b24 <HAL_DMA_Init+0x16c>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40020407 	.word	0x40020407
 8001b0c:	bffdfff8 	.word	0xbffdfff8
 8001b10:	cccccccd 	.word	0xcccccccd
 8001b14:	40020000 	.word	0x40020000
 8001b18:	bffdfbf8 	.word	0xbffdfbf8
 8001b1c:	40020400 	.word	0x40020400
 8001b20:	400200a8 	.word	0x400200a8
 8001b24:	400204a8 	.word	0x400204a8

08001b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Start_IT+0x20>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e04b      	b.n	8001be0 <HAL_DMA_Start_IT+0xb8>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d13a      	bne.n	8001bd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68b9      	ldr	r1, [r7, #8]
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f91e 	bl	8001dc2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d008      	beq.n	8001ba0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 020e 	orr.w	r2, r2, #14
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	e00f      	b.n	8001bc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0204 	bic.w	r2, r2, #4
 8001bae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 020a 	orr.w	r2, r2, #10
 8001bbe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e005      	b.n	8001bde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d008      	beq.n	8001c12 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e022      	b.n	8001c58 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 020e 	bic.w	r2, r2, #14
 8001c20:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f003 021c 	and.w	r2, r3, #28
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	f003 031c 	and.w	r3, r3, #28
 8001c84:	2204      	movs	r2, #4
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d026      	beq.n	8001cde <HAL_DMA_IRQHandler+0x7a>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d021      	beq.n	8001cde <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0204 	bic.w	r2, r2, #4
 8001cb6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	f003 021c 	and.w	r2, r3, #28
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d071      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001cdc:	e06c      	b.n	8001db8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f003 031c 	and.w	r3, r3, #28
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d02e      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xec>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d029      	beq.n	8001d50 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10b      	bne.n	8001d22 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 020a 	bic.w	r2, r2, #10
 8001d18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f003 021c 	and.w	r2, r3, #28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2102      	movs	r1, #2
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d038      	beq.n	8001db8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d4e:	e033      	b.n	8001db8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 031c 	and.w	r3, r3, #28
 8001d58:	2208      	movs	r2, #8
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02a      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d025      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020e 	bic.w	r2, r2, #14
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f003 021c 	and.w	r2, r3, #28
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
}
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 021c 	and.w	r2, r3, #28
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d108      	bne.n	8001e06 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e04:	e007      	b.n	8001e16 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	60da      	str	r2, [r3, #12]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e17f      	b.n	8002134 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8171 	beq.w	800212e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f003 0201 	and.w	r2, r3, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d118      	bne.n	8001f04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	6939      	ldr	r1, [r7, #16]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80ac 	beq.w	800212e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b5f      	ldr	r3, [pc, #380]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	4a5e      	ldr	r2, [pc, #376]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe2:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HAL_GPIO_Init+0x330>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fee:	4a5a      	ldr	r2, [pc, #360]	; (8002158 <HAL_GPIO_Init+0x334>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x242>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_GPIO_Init+0x338>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x23e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_GPIO_Init+0x33c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x23a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_GPIO_Init+0x340>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_GPIO_Init+0x344>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x232>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_GPIO_Init+0x348>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x22e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x34c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x22a>
 800204a:	2306      	movs	r3, #6
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800204e:	2307      	movs	r3, #7
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x244>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x244>
 8002066:	2300      	movs	r3, #0
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002078:	4937      	ldr	r1, [pc, #220]	; (8002158 <HAL_GPIO_Init+0x334>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002086:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_GPIO_Init+0x350>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x350>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x350>)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_GPIO_Init+0x350>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002128:	4a12      	ldr	r2, [pc, #72]	; (8002174 <HAL_GPIO_Init+0x350>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f ae78 	bne.w	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	48000400 	.word	0x48000400
 8002160:	48000800 	.word	0x48000800
 8002164:	48000c00 	.word	0x48000c00
 8002168:	48001000 	.word	0x48001000
 800216c:	48001400 	.word	0x48001400
 8002170:	48001800 	.word	0x48001800
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002186:	e0cd      	b.n	8002324 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002188:	2201      	movs	r2, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80c0 	beq.w	800231e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800219e:	4a68      	ldr	r2, [pc, #416]	; (8002340 <HAL_GPIO_DeInit+0x1c8>)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c6:	d025      	beq.n	8002214 <HAL_GPIO_DeInit+0x9c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a5e      	ldr	r2, [pc, #376]	; (8002344 <HAL_GPIO_DeInit+0x1cc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d01f      	beq.n	8002210 <HAL_GPIO_DeInit+0x98>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_GPIO_DeInit+0x1d0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d019      	beq.n	800220c <HAL_GPIO_DeInit+0x94>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a5c      	ldr	r2, [pc, #368]	; (800234c <HAL_GPIO_DeInit+0x1d4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_DeInit+0x90>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_GPIO_DeInit+0x1d8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_DeInit+0x8c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a5a      	ldr	r2, [pc, #360]	; (8002354 <HAL_GPIO_DeInit+0x1dc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_DeInit+0x88>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a59      	ldr	r2, [pc, #356]	; (8002358 <HAL_GPIO_DeInit+0x1e0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_DeInit+0x84>
 80021f8:	2306      	movs	r3, #6
 80021fa:	e00c      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 80021fc:	2307      	movs	r3, #7
 80021fe:	e00a      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 8002200:	2305      	movs	r3, #5
 8002202:	e008      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 8002204:	2304      	movs	r3, #4
 8002206:	e006      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 8002208:	2303      	movs	r3, #3
 800220a:	e004      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 800220c:	2302      	movs	r3, #2
 800220e:	e002      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <HAL_GPIO_DeInit+0x9e>
 8002214:	2300      	movs	r3, #0
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	f002 0203 	and.w	r2, r2, #3
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	4093      	lsls	r3, r2
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	429a      	cmp	r2, r3
 8002224:	d132      	bne.n	800228c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	494b      	ldr	r1, [pc, #300]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 8002230:	4013      	ands	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002234:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	4947      	ldr	r1, [pc, #284]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 800223e:	4013      	ands	r3, r2
 8002240:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	4944      	ldr	r1, [pc, #272]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 800224c:	4013      	ands	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	4940      	ldr	r1, [pc, #256]	; (800235c <HAL_GPIO_DeInit+0x1e4>)
 800225a:	4013      	ands	r3, r2
 800225c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800226e:	4a34      	ldr	r2, [pc, #208]	; (8002340 <HAL_GPIO_DeInit+0x1c8>)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43da      	mvns	r2, r3
 800227e:	4830      	ldr	r0, [pc, #192]	; (8002340 <HAL_GPIO_DeInit+0x1c8>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	400a      	ands	r2, r1
 8002286:	3302      	adds	r3, #2
 8002288:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2103      	movs	r1, #3
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	08da      	lsrs	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3208      	adds	r2, #8
 80022a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	08d2      	lsrs	r2, r2, #3
 80022c0:	4019      	ands	r1, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2103      	movs	r1, #3
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2101      	movs	r1, #1
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2103      	movs	r1, #3
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230e:	2101      	movs	r1, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f af2b 	bne.w	8002188 <HAL_GPIO_DeInit+0x10>
  }
}
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	371c      	adds	r7, #28
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40010000 	.word	0x40010000
 8002344:	48000400 	.word	0x48000400
 8002348:	48000800 	.word	0x48000800
 800234c:	48000c00 	.word	0x48000c00
 8002350:	48001000 	.word	0x48001000
 8002354:	48001400 	.word	0x48001400
 8002358:	48001800 	.word	0x48001800
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800237c:	e002      	b.n	8002384 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43d9      	mvns	r1, r3
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	400b      	ands	r3, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 fb56 	bl	8005a94 <HAL_GPIO_EXTI_Callback>
  }
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40010400 	.word	0x40010400

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e081      	b.n	800250a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f004 f962 	bl	80066e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	; 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e006      	b.n	800247c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800247a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d104      	bne.n	800248e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69d9      	ldr	r1, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1a      	ldr	r2, [r3, #32]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e021      	b.n	8002568 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f004 f92f 	bl	80067a0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	461a      	mov	r2, r3
 800257e:	4603      	mov	r3, r0
 8002580:	817b      	strh	r3, [r7, #10]
 8002582:	460b      	mov	r3, r1
 8002584:	813b      	strh	r3, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	f040 80f9 	bne.w	800278a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x34>
 800259e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0ed      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Mem_Write+0x4e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0e6      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c6:	f7fe fd73 	bl	80010b0 <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fac3 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0d1      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2221      	movs	r2, #33	; 0x21
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002608:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002610:	88f8      	ldrh	r0, [r7, #6]
 8002612:	893a      	ldrh	r2, [r7, #8]
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4603      	mov	r3, r0
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f9d3 	bl	80029cc <I2C_RequestMemoryWrite>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0a9      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d90e      	bls.n	8002660 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	22ff      	movs	r2, #255	; 0xff
 8002646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	b2da      	uxtb	r2, r3
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fc2b 	bl	8002eb4 <I2C_TransferConfig>
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fc1a 	bl	8002eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 faad 	bl	8002be4 <I2C_WaitOnTXISFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e07b      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	781a      	ldrb	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d034      	beq.n	8002738 <HAL_I2C_Mem_Write+0x1c8>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d130      	bne.n	8002738 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	2200      	movs	r2, #0
 80026de:	2180      	movs	r1, #128	; 0x80
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fa3f 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e04d      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d90e      	bls.n	8002718 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	22ff      	movs	r2, #255	; 0xff
 80026fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	b2da      	uxtb	r2, r3
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fbcf 	bl	8002eb4 <I2C_TransferConfig>
 8002716:	e00f      	b.n	8002738 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fbbe 	bl	8002eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d19e      	bne.n	8002680 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa8c 	bl	8002c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e01a      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2220      	movs	r2, #32
 800275c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6859      	ldr	r1, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_I2C_Mem_Write+0x224>)
 800276a:	400b      	ands	r3, r1
 800276c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	f040 80fd 	bne.w	80029ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_I2C_Mem_Read+0x34>
 80027c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0f1      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x4e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0ea      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ee:	f7fe fc5f 	bl	80010b0 <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2319      	movs	r3, #25
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f9af 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0d5      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2222      	movs	r2, #34	; 0x22
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a3a      	ldr	r2, [r7, #32]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002838:	88f8      	ldrh	r0, [r7, #6]
 800283a:	893a      	ldrh	r2, [r7, #8]
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4603      	mov	r3, r0
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f913 	bl	8002a74 <I2C_RequestMemoryRead>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0ad      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	2bff      	cmp	r3, #255	; 0xff
 8002868:	d90e      	bls.n	8002888 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_I2C_Mem_Read+0x22c>)
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 fb17 	bl	8002eb4 <I2C_TransferConfig>
 8002886:	e00f      	b.n	80028a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	b2da      	uxtb	r2, r3
 8002898:	8979      	ldrh	r1, [r7, #10]
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_I2C_Mem_Read+0x22c>)
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fb06 	bl	8002eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2200      	movs	r2, #0
 80028b0:	2104      	movs	r1, #4
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f956 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07c      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d034      	beq.n	8002968 <HAL_I2C_Mem_Read+0x1d0>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	2b00      	cmp	r3, #0
 8002904:	d130      	bne.n	8002968 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f927 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e04d      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2bff      	cmp	r3, #255	; 0xff
 8002928:	d90e      	bls.n	8002948 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fab7 	bl	8002eb4 <I2C_TransferConfig>
 8002946:	e00f      	b.n	8002968 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	b2da      	uxtb	r2, r3
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 faa6 	bl	8002eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d19a      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f974 	bl	8002c64 <I2C_WaitOnSTOPFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e01a      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2220      	movs	r2, #32
 800298c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_I2C_Mem_Read+0x230>)
 800299a:	400b      	ands	r3, r1
 800299c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	80002400 	.word	0x80002400
 80029c8:	fe00e800 	.word	0xfe00e800

080029cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	8979      	ldrh	r1, [r7, #10]
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <I2C_RequestMemoryWrite+0xa4>)
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fa5d 	bl	8002eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	69b9      	ldr	r1, [r7, #24]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f8f0 	bl	8002be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e02c      	b.n	8002a68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8002a1e:	e015      	b.n	8002a4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	69b9      	ldr	r1, [r7, #24]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8d6 	bl	8002be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e012      	b.n	8002a68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a42:	893b      	ldrh	r3, [r7, #8]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f884 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	80002000 	.word	0x80002000

08002a74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <I2C_RequestMemoryRead+0xa4>)
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa0a 	bl	8002eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f89d 	bl	8002be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e02c      	b.n	8002b0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac4:	e015      	b.n	8002af2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac6:	893b      	ldrh	r3, [r7, #8]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f883 	bl	8002be4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e012      	b.n	8002b0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ae8:	893b      	ldrh	r3, [r7, #8]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2140      	movs	r1, #64	; 0x40
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f831 	bl	8002b64 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	80002000 	.word	0x80002000

08002b1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d103      	bne.n	8002b3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d007      	beq.n	8002b58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	619a      	str	r2, [r3, #24]
  }
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b74:	e022      	b.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7c:	d01e      	beq.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b7e:	f7fe fa97 	bl	80010b0 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d302      	bcc.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d113      	bne.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e00f      	b.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d0cd      	beq.n	8002b76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bf0:	e02c      	b.n	8002c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f870 	bl	8002cdc <I2C_IsErrorOccurred>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e02a      	b.n	8002c5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0c:	d01e      	beq.n	8002c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe fa4f 	bl	80010b0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d113      	bne.n	8002c4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0220 	orr.w	r2, r3, #32
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e007      	b.n	8002c5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d1cb      	bne.n	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c70:	e028      	b.n	8002cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f830 	bl	8002cdc <I2C_IsErrorOccurred>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e026      	b.n	8002cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fa13 	bl	80010b0 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d113      	bne.n	8002cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d1cf      	bne.n	8002c72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d075      	beq.n	8002df4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d10:	e056      	b.n	8002dc0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d052      	beq.n	8002dc0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fe f9c9 	bl	80010b0 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_IsErrorOccurred+0x54>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d147      	bne.n	8002dc0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d52:	d12e      	bne.n	8002db2 <I2C_IsErrorOccurred+0xd6>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d5a:	d02a      	beq.n	8002db2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d027      	beq.n	8002db2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d72:	f7fe f99d 	bl	80010b0 <HAL_GetTick>
 8002d76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d78:	e01b      	b.n	8002db2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d7a:	f7fe f999 	bl	80010b0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b19      	cmp	r3, #25
 8002d86:	d914      	bls.n	8002db2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d1dc      	bne.n	8002d7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d003      	beq.n	8002dd6 <I2C_IsErrorOccurred+0xfa>
 8002dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d09d      	beq.n	8002d12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2220      	movs	r2, #32
 8002de4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f043 0308 	orr.w	r3, r3, #8
 8002e2e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f043 0302 	orr.w	r3, r3, #2
 8002e50:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01c      	beq.n	8002ea4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff fe56 	bl	8002b1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <I2C_IsErrorOccurred+0x1d4>)
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	fe00e800 	.word	0xfe00e800

08002eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	817b      	strh	r3, [r7, #10]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ecc:	7a7b      	ldrb	r3, [r7, #9]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ed4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ee2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	0d5b      	lsrs	r3, r3, #21
 8002eee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <I2C_TransferConfig+0x60>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	ea02 0103 	and.w	r1, r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	03ff63ff 	.word	0x03ff63ff

08002f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d138      	bne.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e032      	b.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d139      	bne.n	8003038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e033      	b.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	; 0x24
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_PWREx_GetVoltageRange+0x18>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000

08003064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003072:	d130      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d038      	beq.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308a:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003090:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2232      	movs	r2, #50	; 0x32
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0c9b      	lsrs	r3, r3, #18
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a8:	e002      	b.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030bc:	d102      	bne.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f2      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d110      	bne.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e00f      	b.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e2:	d007      	beq.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ec:	4a05      	ldr	r2, [pc, #20]	; (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40007000 	.word	0x40007000
 8003108:	20000048 	.word	0x20000048
 800310c:	431bde83 	.word	0x431bde83

08003110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e3ca      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	4b97      	ldr	r3, [pc, #604]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312c:	4b94      	ldr	r3, [pc, #592]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80e4 	beq.w	800330c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_RCC_OscConfig+0x4a>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	f040 808b 	bne.w	8003268 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b01      	cmp	r3, #1
 8003156:	f040 8087 	bne.w	8003268 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800315a:	4b89      	ldr	r3, [pc, #548]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e3a2      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	4b82      	ldr	r3, [pc, #520]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_RCC_OscConfig+0x7c>
 8003182:	4b7f      	ldr	r3, [pc, #508]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318a:	e005      	b.n	8003198 <HAL_RCC_OscConfig+0x88>
 800318c:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800318e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	4293      	cmp	r3, r2
 800319a:	d223      	bcs.n	80031e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fd55 	bl	8003c50 <RCC_SetFlashLatencyFromMSIRange>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e383      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b0:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a72      	ldr	r2, [pc, #456]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031b6:	f043 0308 	orr.w	r3, r3, #8
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b70      	ldr	r3, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	496d      	ldr	r1, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ce:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	4968      	ldr	r1, [pc, #416]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	e025      	b.n	8003230 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e4:	4b66      	ldr	r3, [pc, #408]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031ea:	f043 0308 	orr.w	r3, r3, #8
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	4b63      	ldr	r3, [pc, #396]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4960      	ldr	r1, [pc, #384]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003202:	4b5f      	ldr	r3, [pc, #380]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	495b      	ldr	r1, [pc, #364]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fd15 	bl	8003c50 <RCC_SetFlashLatencyFromMSIRange>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e343      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003230:	f000 fc4a 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b52      	ldr	r3, [pc, #328]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_RCC_OscConfig+0x274>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	4a4e      	ldr	r2, [pc, #312]	; (8003388 <HAL_RCC_OscConfig+0x278>)
 800324e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003250:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCC_OscConfig+0x27c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd fedb 	bl	8001010 <HAL_InitTick>
 800325a:	4603      	mov	r3, r0
 800325c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d052      	beq.n	800330a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	e327      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d032      	beq.n	80032d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003270:	4b43      	ldr	r3, [pc, #268]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a42      	ldr	r2, [pc, #264]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800327c:	f7fd ff18 	bl	80010b0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003284:	f7fd ff14 	bl	80010b0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e310      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003296:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a36      	ldr	r2, [pc, #216]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a8:	f043 0308 	orr.w	r3, r3, #8
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b34      	ldr	r3, [pc, #208]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4931      	ldr	r1, [pc, #196]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	021b      	lsls	r3, r3, #8
 80032ce:	492c      	ldr	r1, [pc, #176]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
 80032d4:	e01a      	b.n	800330c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d6:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a29      	ldr	r2, [pc, #164]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e2:	f7fd fee5 	bl	80010b0 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ea:	f7fd fee1 	bl	80010b0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e2dd      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x1da>
 8003308:	e000      	b.n	800330c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800330a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d074      	beq.n	8003402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b08      	cmp	r3, #8
 800331c:	d005      	beq.n	800332a <HAL_RCC_OscConfig+0x21a>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	d10e      	bne.n	8003342 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d10b      	bne.n	8003342 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d064      	beq.n	8003400 <HAL_RCC_OscConfig+0x2f0>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d160      	bne.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e2ba      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x24a>
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e026      	b.n	80033a8 <HAL_RCC_OscConfig+0x298>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003362:	d115      	bne.n	8003390 <HAL_RCC_OscConfig+0x280>
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 800336a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a02      	ldr	r2, [pc, #8]	; (8003380 <HAL_RCC_OscConfig+0x270>)
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	e014      	b.n	80033a8 <HAL_RCC_OscConfig+0x298>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	08007458 	.word	0x08007458
 8003388:	20000048 	.word	0x20000048
 800338c:	20000034 	.word	0x20000034
 8003390:	4ba0      	ldr	r3, [pc, #640]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a9f      	ldr	r2, [pc, #636]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b9d      	ldr	r3, [pc, #628]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a9c      	ldr	r2, [pc, #624]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd fe7e 	bl	80010b0 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fd fe7a 	bl	80010b0 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e276      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ca:	4b92      	ldr	r3, [pc, #584]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2a8>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd fe6a 	bl	80010b0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd fe66 	bl	80010b0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e262      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f2:	4b88      	ldr	r3, [pc, #544]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2d0>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d060      	beq.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x310>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d119      	bne.n	800344e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d116      	bne.n	800344e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003420:	4b7c      	ldr	r3, [pc, #496]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_OscConfig+0x328>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e23f      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b76      	ldr	r3, [pc, #472]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	4973      	ldr	r1, [pc, #460]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800344c:	e040      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d023      	beq.n	800349e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003456:	4b6f      	ldr	r3, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6e      	ldr	r2, [pc, #440]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fd fe25 	bl	80010b0 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fd fe21 	bl	80010b0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e21d      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b62      	ldr	r3, [pc, #392]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	495f      	ldr	r1, [pc, #380]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e018      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5c      	ldr	r2, [pc, #368]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fe01 	bl	80010b0 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fd fdfd 	bl	80010b0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1f9      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03c      	beq.n	8003556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01c      	beq.n	800351e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ea:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fddc 	bl	80010b0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fd fdd8 	bl	80010b0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1d4      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350e:	4b41      	ldr	r3, [pc, #260]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ef      	beq.n	80034fc <HAL_RCC_OscConfig+0x3ec>
 800351c:	e01b      	b.n	8003556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b3d      	ldr	r3, [pc, #244]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003524:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd fdbf 	bl	80010b0 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fdbb 	bl	80010b0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1b7      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a6 	beq.w	80036b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003568:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b27      	ldr	r3, [pc, #156]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358c:	2301      	movs	r3, #1
 800358e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	4b21      	ldr	r3, [pc, #132]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d118      	bne.n	80035ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a8:	f7fd fd82 	bl	80010b0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fd fd7e 	bl	80010b0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e17a      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x508>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4d8>
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e6:	e029      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d115      	bne.n	800361c <HAL_RCC_OscConfig+0x50c>
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a03      	ldr	r2, [pc, #12]	; (8003614 <HAL_RCC_OscConfig+0x504>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	4b9c      	ldr	r3, [pc, #624]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003622:	4a9b      	ldr	r2, [pc, #620]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800362c:	4b98      	ldr	r3, [pc, #608]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003632:	4a97      	ldr	r2, [pc, #604]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd fd34 	bl	80010b0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fd fd30 	bl	80010b0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e12a      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003662:	4b8b      	ldr	r3, [pc, #556]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ed      	beq.n	800364c <HAL_RCC_OscConfig+0x53c>
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fd fd1d 	bl	80010b0 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd fd19 	bl	80010b0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e113      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003690:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ed      	bne.n	800367a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369e:	7ffb      	ldrb	r3, [r7, #31]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b7a      	ldr	r3, [pc, #488]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	4a79      	ldr	r2, [pc, #484]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80fe 	beq.w	80038b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	2b02      	cmp	r3, #2
 80036c0:	f040 80d0 	bne.w	8003864 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036c4:	4b72      	ldr	r3, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0203 	and.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d130      	bne.n	800373a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	3b01      	subs	r3, #1
 80036e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d127      	bne.n	800373a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d11f      	bne.n	800373a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003704:	2a07      	cmp	r2, #7
 8003706:	bf14      	ite	ne
 8003708:	2201      	movne	r2, #1
 800370a:	2200      	moveq	r2, #0
 800370c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800370e:	4293      	cmp	r3, r2
 8003710:	d113      	bne.n	800373a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d109      	bne.n	800373a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	3b01      	subs	r3, #1
 8003734:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d06e      	beq.n	8003818 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d069      	beq.n	8003814 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800374c:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0ad      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800375c:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003768:	f7fd fca2 	bl	80010b0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003770:	f7fd fc9e 	bl	80010b0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e09a      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378e:	4b40      	ldr	r3, [pc, #256]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_RCC_OscConfig+0x784>)
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800379e:	3a01      	subs	r2, #1
 80037a0:	0112      	lsls	r2, r2, #4
 80037a2:	4311      	orrs	r1, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037a8:	0212      	lsls	r2, r2, #8
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037b0:	0852      	lsrs	r2, r2, #1
 80037b2:	3a01      	subs	r2, #1
 80037b4:	0552      	lsls	r2, r2, #21
 80037b6:	4311      	orrs	r1, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037bc:	0852      	lsrs	r2, r2, #1
 80037be:	3a01      	subs	r2, #1
 80037c0:	0652      	lsls	r2, r2, #25
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037c8:	0912      	lsrs	r2, r2, #4
 80037ca:	0452      	lsls	r2, r2, #17
 80037cc:	430a      	orrs	r2, r1
 80037ce:	4930      	ldr	r1, [pc, #192]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037d4:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80037da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e0:	4b2b      	ldr	r3, [pc, #172]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 80037e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ec:	f7fd fc60 	bl	80010b0 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fd fc5c 	bl	80010b0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e058      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003812:	e050      	b.n	80038b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e04f      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d148      	bne.n	80038b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800382a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003830:	4b17      	ldr	r3, [pc, #92]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a16      	ldr	r2, [pc, #88]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800383c:	f7fd fc38 	bl	80010b0 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fd fc34 	bl	80010b0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e030      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x734>
 8003862:	e028      	b.n	80038b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d023      	beq.n	80038b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a08      	ldr	r2, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x780>)
 8003870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fd fc1b 	bl	80010b0 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387c:	e00c      	b.n	8003898 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd fc17 	bl	80010b0 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d905      	bls.n	8003898 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e013      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
 8003890:	40021000 	.word	0x40021000
 8003894:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_OscConfig+0x7b0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ec      	bne.n	800387e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_OscConfig+0x7b0>)
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	4905      	ldr	r1, [pc, #20]	; (80038c0 <HAL_RCC_OscConfig+0x7b0>)
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_OscConfig+0x7b4>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60cb      	str	r3, [r1, #12]
 80038b0:	e001      	b.n	80038b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	feeefffc 	.word	0xfeeefffc

080038c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0e7      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038dc:	4b75      	ldr	r3, [pc, #468]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d910      	bls.n	800390c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b72      	ldr	r3, [pc, #456]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 0207 	bic.w	r2, r3, #7
 80038f2:	4970      	ldr	r1, [pc, #448]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b6e      	ldr	r3, [pc, #440]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0cf      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b66      	ldr	r3, [pc, #408]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003924:	429a      	cmp	r2, r3
 8003926:	d908      	bls.n	800393a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003928:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4960      	ldr	r1, [pc, #384]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04c      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	4b5a      	ldr	r3, [pc, #360]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d121      	bne.n	800399e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0a6      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003966:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d115      	bne.n	800399e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e09a      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800397e:	4b4e      	ldr	r3, [pc, #312]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e08e      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e086      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4943      	ldr	r1, [pc, #268]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b0:	f7fd fb7e 	bl	80010b0 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fd fb7a 	bl	80010b0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e06e      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b3a      	ldr	r3, [pc, #232]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d010      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d208      	bcs.n	8003a0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	492b      	ldr	r1, [pc, #172]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d210      	bcs.n	8003a3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 0207 	bic.w	r2, r3, #7
 8003a24:	4923      	ldr	r1, [pc, #140]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <HAL_RCC_ClockConfig+0x1ec>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e036      	b.n	8003aac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	4918      	ldr	r1, [pc, #96]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4910      	ldr	r1, [pc, #64]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a7c:	f000 f824 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <HAL_RCC_ClockConfig+0x1f0>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	490b      	ldr	r1, [pc, #44]	; (8003abc <HAL_RCC_ClockConfig+0x1f4>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x1f8>)
 8003a9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_RCC_ClockConfig+0x1fc>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd fab5 	bl	8001010 <HAL_InitTick>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08007458 	.word	0x08007458
 8003ac0:	20000048 	.word	0x20000048
 8003ac4:	20000034 	.word	0x20000034

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae0:	4b3b      	ldr	r3, [pc, #236]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x34>
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d121      	bne.n	8003b3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d11e      	bne.n	8003b3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003afc:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	61fb      	str	r3, [r7, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b24:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b40:	4b25      	ldr	r3, [pc, #148]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e004      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003b4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d134      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b56:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d003      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0xac>
 8003b6c:	e005      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b6e:	4b1a      	ldr	r3, [pc, #104]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b70:	617b      	str	r3, [r7, #20]
      break;
 8003b72:	e005      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x114>)
 8003b76:	617b      	str	r3, [r7, #20]
      break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	617b      	str	r3, [r7, #20]
      break;
 8003b7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	fb03 f202 	mul.w	r2, r3, r2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	0e5b      	lsrs	r3, r3, #25
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3724      	adds	r7, #36	; 0x24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08007470 	.word	0x08007470
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	007a1200 	.word	0x007a1200

08003be0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000048 	.word	0x20000048

08003bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bfc:	f7ff fff0 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	4904      	ldr	r1, [pc, #16]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c0e:	5ccb      	ldrb	r3, [r1, r3]
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	08007468 	.word	0x08007468

08003c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c28:	f7ff ffda 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	0adb      	lsrs	r3, r3, #11
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4904      	ldr	r1, [pc, #16]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08007468 	.word	0x08007468

08003c50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c68:	f7ff f9ee 	bl	8003048 <HAL_PWREx_GetVoltageRange>
 8003c6c:	6178      	str	r0, [r7, #20]
 8003c6e:	e014      	b.n	8003c9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c88:	f7ff f9de 	bl	8003048 <HAL_PWREx_GetVoltageRange>
 8003c8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca0:	d10b      	bne.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b80      	cmp	r3, #128	; 0x80
 8003ca6:	d919      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2ba0      	cmp	r3, #160	; 0xa0
 8003cac:	d902      	bls.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cae:	2302      	movs	r3, #2
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e013      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e010      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b80      	cmp	r3, #128	; 0x80
 8003cbe:	d902      	bls.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e00a      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b80      	cmp	r3, #128	; 0x80
 8003cca:	d102      	bne.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e004      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d101      	bne.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 0207 	bic.w	r2, r3, #7
 8003ce4:	4909      	ldr	r1, [pc, #36]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d041      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d34:	d02a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d3a:	d824      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d40:	d008      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d46:	d81e      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d50:	d010      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d52:	e018      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d54:	4b86      	ldr	r3, [pc, #536]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a85      	ldr	r2, [pc, #532]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d60:	e015      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2100      	movs	r1, #0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fabb 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d72:	e00c      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3320      	adds	r3, #32
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fba6 	bl	80044cc <RCCEx_PLLSAI2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	74fb      	strb	r3, [r7, #19]
      break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d94:	4b76      	ldr	r3, [pc, #472]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da2:	4973      	ldr	r1, [pc, #460]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003daa:	e001      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d041      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dc4:	d02a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003dc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dca:	d824      	bhi.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dd6:	d81e      	bhi.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003de0:	d010      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003de2:	e018      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003de4:	4b62      	ldr	r3, [pc, #392]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	4a61      	ldr	r2, [pc, #388]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003df0:	e015      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fa73 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e02:	e00c      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3320      	adds	r3, #32
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fb5e 	bl	80044cc <RCCEx_PLLSAI2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	74fb      	strb	r3, [r7, #19]
      break;
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e24:	4b52      	ldr	r3, [pc, #328]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e32:	494f      	ldr	r1, [pc, #316]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e3a:	e001      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a0 	beq.w	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e62:	2300      	movs	r3, #0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	4a40      	ldr	r2, [pc, #256]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a3a      	ldr	r2, [pc, #232]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e90:	f7fd f90e 	bl	80010b0 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e96:	e009      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e98:	f7fd f90a 	bl	80010b0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	74fb      	strb	r3, [r7, #19]
        break;
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003eac:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ef      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d15c      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01f      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d019      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ee8:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	4a20      	ldr	r2, [pc, #128]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd f8c9 	bl	80010b0 <HAL_GetTick>
 8003f1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f20:	e00b      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd f8c5 	bl	80010b0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d902      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	74fb      	strb	r3, [r7, #19]
            break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ec      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f66:	e009      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7c:	7c7b      	ldrb	r3, [r7, #17]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b9e      	ldr	r3, [pc, #632]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	4a9d      	ldr	r2, [pc, #628]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f9a:	4b98      	ldr	r3, [pc, #608]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f023 0203 	bic.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	4994      	ldr	r1, [pc, #592]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fbc:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f023 020c 	bic.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	498c      	ldr	r1, [pc, #560]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fde:	4b87      	ldr	r3, [pc, #540]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	4983      	ldr	r1, [pc, #524]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004000:	4b7e      	ldr	r3, [pc, #504]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	497b      	ldr	r1, [pc, #492]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004022:	4b76      	ldr	r3, [pc, #472]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	4972      	ldr	r1, [pc, #456]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004044:	4b6d      	ldr	r3, [pc, #436]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	496a      	ldr	r1, [pc, #424]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004066:	4b65      	ldr	r3, [pc, #404]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	4961      	ldr	r1, [pc, #388]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004088:	4b5c      	ldr	r3, [pc, #368]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	4959      	ldr	r1, [pc, #356]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040aa:	4b54      	ldr	r3, [pc, #336]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	4950      	ldr	r1, [pc, #320]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	4948      	ldr	r1, [pc, #288]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	493f      	ldr	r1, [pc, #252]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d028      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800411e:	4937      	ldr	r1, [pc, #220]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800412e:	d106      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004130:	4b32      	ldr	r3, [pc, #200]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a31      	ldr	r2, [pc, #196]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413a:	60d3      	str	r3, [r2, #12]
 800413c:	e011      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004146:	d10c      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	2101      	movs	r1, #1
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8c8 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d028      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	491f      	ldr	r1, [pc, #124]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800418c:	d106      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004198:	60d3      	str	r3, [r2, #12]
 800419a:	e011      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2101      	movs	r1, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f899 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02b      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041da:	4908      	ldr	r1, [pc, #32]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ea:	d109      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4a02      	ldr	r2, [pc, #8]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f6:	60d3      	str	r3, [r2, #12]
 80041f8:	e014      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004208:	d10c      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	2101      	movs	r1, #1
 8004210:	4618      	mov	r0, r3
 8004212:	f000 f867 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004220:	7cfb      	ldrb	r3, [r7, #19]
 8004222:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d02f      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423e:	4928      	ldr	r1, [pc, #160]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800424a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424e:	d10d      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 f844 	bl	80042e4 <RCCEx_PLLSAI1_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d014      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	74bb      	strb	r3, [r7, #18]
 800426a:	e011      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3320      	adds	r3, #32
 800427a:	2102      	movs	r1, #2
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f925 	bl	80044cc <RCCEx_PLLSAI2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042aa:	490d      	ldr	r1, [pc, #52]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ce:	4904      	ldr	r1, [pc, #16]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000

080042e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f2:	4b75      	ldr	r3, [pc, #468]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d018      	beq.n	8004330 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042fe:	4b72      	ldr	r3, [pc, #456]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d10d      	bne.n	800432a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
       ||
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004316:	4b6c      	ldr	r3, [pc, #432]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
       ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d047      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e044      	b.n	80043ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d018      	beq.n	800436a <RCCEx_PLLSAI1_Config+0x86>
 8004338:	2b03      	cmp	r3, #3
 800433a:	d825      	bhi.n	8004388 <RCCEx_PLLSAI1_Config+0xa4>
 800433c:	2b01      	cmp	r3, #1
 800433e:	d002      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x62>
 8004340:	2b02      	cmp	r3, #2
 8004342:	d009      	beq.n	8004358 <RCCEx_PLLSAI1_Config+0x74>
 8004344:	e020      	b.n	8004388 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004346:	4b60      	ldr	r3, [pc, #384]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11d      	bne.n	800438e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004356:	e01a      	b.n	800438e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004358:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004360:	2b00      	cmp	r3, #0
 8004362:	d116      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004368:	e013      	b.n	8004392 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800436a:	4b57      	ldr	r3, [pc, #348]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004376:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d109      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004386:	e006      	b.n	8004396 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	e004      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004396:	bf00      	nop
    }

    if(status == HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	430b      	orrs	r3, r1
 80043b4:	4944      	ldr	r1, [pc, #272]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d17d      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80043c0:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a40      	ldr	r2, [pc, #256]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fc fe70 	bl	80010b0 <HAL_GetTick>
 80043d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043d2:	e009      	b.n	80043e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d4:	f7fc fe6c 	bl	80010b0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d902      	bls.n	80043e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	73fb      	strb	r3, [r7, #15]
        break;
 80043e6:	e005      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043e8:	4b37      	ldr	r3, [pc, #220]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1ef      	bne.n	80043d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d160      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004400:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	0912      	lsrs	r2, r2, #4
 8004418:	0452      	lsls	r2, r2, #17
 800441a:	430a      	orrs	r2, r1
 800441c:	492a      	ldr	r1, [pc, #168]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	610b      	str	r3, [r1, #16]
 8004422:	e027      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d112      	bne.n	8004450 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800442a:	4b27      	ldr	r3, [pc, #156]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004432:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	0211      	lsls	r1, r2, #8
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6912      	ldr	r2, [r2, #16]
 8004440:	0852      	lsrs	r2, r2, #1
 8004442:	3a01      	subs	r2, #1
 8004444:	0552      	lsls	r2, r2, #21
 8004446:	430a      	orrs	r2, r1
 8004448:	491f      	ldr	r1, [pc, #124]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	610b      	str	r3, [r1, #16]
 800444e:	e011      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004450:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	0211      	lsls	r1, r2, #8
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6952      	ldr	r2, [r2, #20]
 8004466:	0852      	lsrs	r2, r2, #1
 8004468:	3a01      	subs	r2, #1
 800446a:	0652      	lsls	r2, r2, #25
 800446c:	430a      	orrs	r2, r1
 800446e:	4916      	ldr	r1, [pc, #88]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	4313      	orrs	r3, r2
 8004472:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004474:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800447a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800447e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fc fe16 	bl	80010b0 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004486:	e009      	b.n	800449c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004488:	f7fc fe12 	bl	80010b0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d902      	bls.n	800449c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	73fb      	strb	r3, [r7, #15]
          break;
 800449a:	e005      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ef      	beq.n	8004488 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	4904      	ldr	r1, [pc, #16]	; (80044c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000

080044cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044da:	4b6a      	ldr	r3, [pc, #424]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d018      	beq.n	8004518 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0203 	and.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d10d      	bne.n	8004512 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
       ||
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044fe:	4b61      	ldr	r3, [pc, #388]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
       ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d047      	beq.n	80045a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	e044      	b.n	80045a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b03      	cmp	r3, #3
 800451e:	d018      	beq.n	8004552 <RCCEx_PLLSAI2_Config+0x86>
 8004520:	2b03      	cmp	r3, #3
 8004522:	d825      	bhi.n	8004570 <RCCEx_PLLSAI2_Config+0xa4>
 8004524:	2b01      	cmp	r3, #1
 8004526:	d002      	beq.n	800452e <RCCEx_PLLSAI2_Config+0x62>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d009      	beq.n	8004540 <RCCEx_PLLSAI2_Config+0x74>
 800452c:	e020      	b.n	8004570 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800452e:	4b55      	ldr	r3, [pc, #340]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11d      	bne.n	8004576 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800453e:	e01a      	b.n	8004576 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004540:	4b50      	ldr	r3, [pc, #320]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d116      	bne.n	800457a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004550:	e013      	b.n	800457a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004552:	4b4c      	ldr	r3, [pc, #304]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800455e:	4b49      	ldr	r3, [pc, #292]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800456e:	e006      	b.n	800457e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      break;
 8004574:	e004      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800457e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004586:	4b3f      	ldr	r3, [pc, #252]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	3b01      	subs	r3, #1
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	430b      	orrs	r3, r1
 800459c:	4939      	ldr	r1, [pc, #228]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d167      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80045a8:	4b36      	ldr	r3, [pc, #216]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a35      	ldr	r2, [pc, #212]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b4:	f7fc fd7c 	bl	80010b0 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045ba:	e009      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045bc:	f7fc fd78 	bl	80010b0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d902      	bls.n	80045d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	73fb      	strb	r3, [r7, #15]
        break;
 80045ce:	e005      	b.n	80045dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80045d0:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ef      	bne.n	80045bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d14a      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d111      	bne.n	800460c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	0912      	lsrs	r2, r2, #4
 8004600:	0452      	lsls	r2, r2, #17
 8004602:	430a      	orrs	r2, r1
 8004604:	491f      	ldr	r1, [pc, #124]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	614b      	str	r3, [r1, #20]
 800460a:	e011      	b.n	8004630 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6892      	ldr	r2, [r2, #8]
 800461c:	0211      	lsls	r1, r2, #8
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6912      	ldr	r2, [r2, #16]
 8004622:	0852      	lsrs	r2, r2, #1
 8004624:	3a01      	subs	r2, #1
 8004626:	0652      	lsls	r2, r2, #25
 8004628:	430a      	orrs	r2, r1
 800462a:	4916      	ldr	r1, [pc, #88]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462c:	4313      	orrs	r3, r2
 800462e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fc fd38 	bl	80010b0 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004644:	f7fc fd34 	bl	80010b0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
          break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ef      	beq.n	8004644 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4904      	ldr	r1, [pc, #16]	; (8004684 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	4313      	orrs	r3, r2
 8004676:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000

08004688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e049      	b.n	800472e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f002 f89a 	bl	80067e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 fac0 	bl	8004c4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e04f      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <HAL_TIM_Base_Start_IT+0xc4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01d      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d018      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_TIM_Base_Start_IT+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_TIM_Base_Start_IT+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_TIM_Base_Start_IT+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_TIM_Base_Start_IT+0xd4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_Base_Start_IT+0x76>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_TIM_Base_Start_IT+0xd8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d115      	bne.n	80047da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d015      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c6:	d011      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	e008      	b.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e000      	b.n	80047ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40013400 	.word	0x40013400
 8004810:	40014000 	.word	0x40014000
 8004814:	00010007 	.word	0x00010007

08004818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b02      	cmp	r3, #2
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0202 	mvn.w	r2, #2
 8004844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9d8 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f9ca 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f9db 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0204 	mvn.w	r2, #4
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9ae 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9a0 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f9b1 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f984 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f976 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f987 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b10      	cmp	r3, #16
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b10      	cmp	r3, #16
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0210 	mvn.w	r2, #16
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2208      	movs	r2, #8
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f95a 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f94c 	bl	8004bfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f95d 	bl	8004c24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d10e      	bne.n	800499c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0201 	mvn.w	r2, #1
 8004994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f926 	bl	8004be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b80      	cmp	r3, #128	; 0x80
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d107      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fb08 	bl	8004fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d10e      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fafb 	bl	8004fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d10e      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d107      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f90b 	bl	8004c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d10e      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0220 	mvn.w	r2, #32
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fabb 	bl	8004fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_ConfigClockSource+0x1c>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e0b6      	b.n	8004be0 <HAL_TIM_ConfigClockSource+0x18a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aae:	d03e      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xd8>
 8004ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab4:	f200 8087 	bhi.w	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abc:	f000 8086 	beq.w	8004bcc <HAL_TIM_ConfigClockSource+0x176>
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac4:	d87f      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004ac6:	2b70      	cmp	r3, #112	; 0x70
 8004ac8:	d01a      	beq.n	8004b00 <HAL_TIM_ConfigClockSource+0xaa>
 8004aca:	2b70      	cmp	r3, #112	; 0x70
 8004acc:	d87b      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004ace:	2b60      	cmp	r3, #96	; 0x60
 8004ad0:	d050      	beq.n	8004b74 <HAL_TIM_ConfigClockSource+0x11e>
 8004ad2:	2b60      	cmp	r3, #96	; 0x60
 8004ad4:	d877      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004ad6:	2b50      	cmp	r3, #80	; 0x50
 8004ad8:	d03c      	beq.n	8004b54 <HAL_TIM_ConfigClockSource+0xfe>
 8004ada:	2b50      	cmp	r3, #80	; 0x50
 8004adc:	d873      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d058      	beq.n	8004b94 <HAL_TIM_ConfigClockSource+0x13e>
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d86f      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004ae6:	2b30      	cmp	r3, #48	; 0x30
 8004ae8:	d064      	beq.n	8004bb4 <HAL_TIM_ConfigClockSource+0x15e>
 8004aea:	2b30      	cmp	r3, #48	; 0x30
 8004aec:	d86b      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	d060      	beq.n	8004bb4 <HAL_TIM_ConfigClockSource+0x15e>
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d867      	bhi.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d05c      	beq.n	8004bb4 <HAL_TIM_ConfigClockSource+0x15e>
 8004afa:	2b10      	cmp	r3, #16
 8004afc:	d05a      	beq.n	8004bb4 <HAL_TIM_ConfigClockSource+0x15e>
 8004afe:	e062      	b.n	8004bc6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6899      	ldr	r1, [r3, #8]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f000 f9b0 	bl	8004e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	609a      	str	r2, [r3, #8]
      break;
 8004b2c:	e04f      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f000 f999 	bl	8004e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b50:	609a      	str	r2, [r3, #8]
      break;
 8004b52:	e03c      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f000 f90d 	bl	8004d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2150      	movs	r1, #80	; 0x50
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f966 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004b72:	e02c      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	461a      	mov	r2, r3
 8004b82:	f000 f92c 	bl	8004dde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2160      	movs	r1, #96	; 0x60
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f956 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004b92:	e01c      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f000 f8ed 	bl	8004d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2140      	movs	r1, #64	; 0x40
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f946 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004bb2:	e00c      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f000 f93d 	bl	8004e3e <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e003      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bca:	e000      	b.n	8004bce <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004bcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a40      	ldr	r2, [pc, #256]	; (8004d60 <TIM_Base_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6a:	d00f      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a3d      	ldr	r2, [pc, #244]	; (8004d64 <TIM_Base_SetConfig+0x118>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a3c      	ldr	r2, [pc, #240]	; (8004d68 <TIM_Base_SetConfig+0x11c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3b      	ldr	r2, [pc, #236]	; (8004d6c <TIM_Base_SetConfig+0x120>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	; (8004d70 <TIM_Base_SetConfig+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d108      	bne.n	8004c9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <TIM_Base_SetConfig+0x114>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d01b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <TIM_Base_SetConfig+0x118>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d017      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a2b      	ldr	r2, [pc, #172]	; (8004d68 <TIM_Base_SetConfig+0x11c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <TIM_Base_SetConfig+0x120>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00f      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <TIM_Base_SetConfig+0x124>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a28      	ldr	r2, [pc, #160]	; (8004d74 <TIM_Base_SetConfig+0x128>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <TIM_Base_SetConfig+0x130>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d108      	bne.n	8004cf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <TIM_Base_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d00f      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <TIM_Base_SetConfig+0x124>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <TIM_Base_SetConfig+0x128>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d007      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <TIM_Base_SetConfig+0x12c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <TIM_Base_SetConfig+0x130>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800

08004d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f023 0201 	bic.w	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f023 030a 	bic.w	r3, r3, #10
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0210 	bic.w	r2, r3, #16
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	031b      	lsls	r3, r3, #12
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f043 0307 	orr.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	021a      	lsls	r2, r3, #8
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e068      	b.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2d      	ldr	r2, [pc, #180]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d108      	bne.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d018      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10c      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40013400 	.word	0x40013400
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40014000 	.word	0x40014000

08004fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e040      	b.n	8005094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f001 fc04 	bl	8006830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	; 0x24
 800502c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8c0 	bl	80051c4 <UART_SetConfig>
 8005044:	4603      	mov	r3, r0
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e022      	b.n	8005094 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fb6c 	bl	8005734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800506a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800507a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fbf3 	bl	8005878 <UART_CheckIdleState>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	f040 8082 	bne.w	80051ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_UART_Transmit+0x26>
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e07a      	b.n	80051bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_UART_Transmit+0x38>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e073      	b.n	80051bc <HAL_UART_Transmit+0x120>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2221      	movs	r2, #33	; 0x21
 80050e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ea:	f7fb ffe1 	bl	80010b0 <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005108:	d108      	bne.n	800511c <HAL_UART_Transmit+0x80>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e003      	b.n	8005124 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800512c:	e02d      	b.n	800518a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	2180      	movs	r1, #128	; 0x80
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fbe6 	bl	800590a <UART_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e039      	b.n	80051bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515a:	b292      	uxth	r2, r2
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	3302      	adds	r3, #2
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e008      	b.n	8005178 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	b292      	uxth	r2, r2
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800517e:	b29b      	uxth	r3, r3
 8005180:	3b01      	subs	r3, #1
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1cb      	bne.n	800512e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2200      	movs	r2, #0
 800519e:	2140      	movs	r1, #64	; 0x40
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fbb2 	bl	800590a <UART_WaitOnFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e005      	b.n	80051bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e000      	b.n	80051bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
  }
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3720      	adds	r7, #32
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b08a      	sub	sp, #40	; 0x28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	4ba4      	ldr	r3, [pc, #656]	; (8005484 <UART_SetConfig+0x2c0>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a99      	ldr	r2, [pc, #612]	; (8005488 <UART_SetConfig+0x2c4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	4313      	orrs	r3, r2
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	430a      	orrs	r2, r1
 8005242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a90      	ldr	r2, [pc, #576]	; (800548c <UART_SetConfig+0x2c8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d126      	bne.n	800529c <UART_SetConfig+0xd8>
 800524e:	4b90      	ldr	r3, [pc, #576]	; (8005490 <UART_SetConfig+0x2cc>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d81b      	bhi.n	8005294 <UART_SetConfig+0xd0>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0xa0>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005275 	.word	0x08005275
 8005268:	08005285 	.word	0x08005285
 800526c:	0800527d 	.word	0x0800527d
 8005270:	0800528d 	.word	0x0800528d
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e116      	b.n	80054aa <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e112      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e10e      	b.n	80054aa <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e10a      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e106      	b.n	80054aa <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7c      	ldr	r2, [pc, #496]	; (8005494 <UART_SetConfig+0x2d0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d138      	bne.n	8005318 <UART_SetConfig+0x154>
 80052a6:	4b7a      	ldr	r3, [pc, #488]	; (8005490 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f003 030c 	and.w	r3, r3, #12
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d82d      	bhi.n	8005310 <UART_SetConfig+0x14c>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <UART_SetConfig+0xf8>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052f1 	.word	0x080052f1
 80052c0:	08005311 	.word	0x08005311
 80052c4:	08005311 	.word	0x08005311
 80052c8:	08005311 	.word	0x08005311
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005311 	.word	0x08005311
 80052d8:	08005311 	.word	0x08005311
 80052dc:	080052f9 	.word	0x080052f9
 80052e0:	08005311 	.word	0x08005311
 80052e4:	08005311 	.word	0x08005311
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005309 	.word	0x08005309
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f6:	e0d8      	b.n	80054aa <UART_SetConfig+0x2e6>
 80052f8:	2302      	movs	r3, #2
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fe:	e0d4      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005306:	e0d0      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530e:	e0cc      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005316:	e0c8      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5e      	ldr	r2, [pc, #376]	; (8005498 <UART_SetConfig+0x2d4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d125      	bne.n	800536e <UART_SetConfig+0x1aa>
 8005322:	4b5b      	ldr	r3, [pc, #364]	; (8005490 <UART_SetConfig+0x2cc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800532c:	2b30      	cmp	r3, #48	; 0x30
 800532e:	d016      	beq.n	800535e <UART_SetConfig+0x19a>
 8005330:	2b30      	cmp	r3, #48	; 0x30
 8005332:	d818      	bhi.n	8005366 <UART_SetConfig+0x1a2>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d00a      	beq.n	800534e <UART_SetConfig+0x18a>
 8005338:	2b20      	cmp	r3, #32
 800533a:	d814      	bhi.n	8005366 <UART_SetConfig+0x1a2>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <UART_SetConfig+0x182>
 8005340:	2b10      	cmp	r3, #16
 8005342:	d008      	beq.n	8005356 <UART_SetConfig+0x192>
 8005344:	e00f      	b.n	8005366 <UART_SetConfig+0x1a2>
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534c:	e0ad      	b.n	80054aa <UART_SetConfig+0x2e6>
 800534e:	2302      	movs	r3, #2
 8005350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005354:	e0a9      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005356:	2304      	movs	r3, #4
 8005358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535c:	e0a5      	b.n	80054aa <UART_SetConfig+0x2e6>
 800535e:	2308      	movs	r3, #8
 8005360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005364:	e0a1      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005366:	2310      	movs	r3, #16
 8005368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536c:	e09d      	b.n	80054aa <UART_SetConfig+0x2e6>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a4a      	ldr	r2, [pc, #296]	; (800549c <UART_SetConfig+0x2d8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d125      	bne.n	80053c4 <UART_SetConfig+0x200>
 8005378:	4b45      	ldr	r3, [pc, #276]	; (8005490 <UART_SetConfig+0x2cc>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005382:	2bc0      	cmp	r3, #192	; 0xc0
 8005384:	d016      	beq.n	80053b4 <UART_SetConfig+0x1f0>
 8005386:	2bc0      	cmp	r3, #192	; 0xc0
 8005388:	d818      	bhi.n	80053bc <UART_SetConfig+0x1f8>
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d00a      	beq.n	80053a4 <UART_SetConfig+0x1e0>
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d814      	bhi.n	80053bc <UART_SetConfig+0x1f8>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <UART_SetConfig+0x1d8>
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d008      	beq.n	80053ac <UART_SetConfig+0x1e8>
 800539a:	e00f      	b.n	80053bc <UART_SetConfig+0x1f8>
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a2:	e082      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053aa:	e07e      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b2:	e07a      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ba:	e076      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c2:	e072      	b.n	80054aa <UART_SetConfig+0x2e6>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a35      	ldr	r2, [pc, #212]	; (80054a0 <UART_SetConfig+0x2dc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d12a      	bne.n	8005424 <UART_SetConfig+0x260>
 80053ce:	4b30      	ldr	r3, [pc, #192]	; (8005490 <UART_SetConfig+0x2cc>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053dc:	d01a      	beq.n	8005414 <UART_SetConfig+0x250>
 80053de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053e2:	d81b      	bhi.n	800541c <UART_SetConfig+0x258>
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d00c      	beq.n	8005404 <UART_SetConfig+0x240>
 80053ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ee:	d815      	bhi.n	800541c <UART_SetConfig+0x258>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <UART_SetConfig+0x238>
 80053f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f8:	d008      	beq.n	800540c <UART_SetConfig+0x248>
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x258>
 80053fc:	2300      	movs	r3, #0
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e052      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e04e      	b.n	80054aa <UART_SetConfig+0x2e6>
 800540c:	2304      	movs	r3, #4
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005412:	e04a      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005414:	2308      	movs	r3, #8
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541a:	e046      	b.n	80054aa <UART_SetConfig+0x2e6>
 800541c:	2310      	movs	r3, #16
 800541e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005422:	e042      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a17      	ldr	r2, [pc, #92]	; (8005488 <UART_SetConfig+0x2c4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d13a      	bne.n	80054a4 <UART_SetConfig+0x2e0>
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <UART_SetConfig+0x2cc>)
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800543c:	d01a      	beq.n	8005474 <UART_SetConfig+0x2b0>
 800543e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005442:	d81b      	bhi.n	800547c <UART_SetConfig+0x2b8>
 8005444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005448:	d00c      	beq.n	8005464 <UART_SetConfig+0x2a0>
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d815      	bhi.n	800547c <UART_SetConfig+0x2b8>
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <UART_SetConfig+0x298>
 8005454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005458:	d008      	beq.n	800546c <UART_SetConfig+0x2a8>
 800545a:	e00f      	b.n	800547c <UART_SetConfig+0x2b8>
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e022      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e01e      	b.n	80054aa <UART_SetConfig+0x2e6>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e01a      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e016      	b.n	80054aa <UART_SetConfig+0x2e6>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e012      	b.n	80054aa <UART_SetConfig+0x2e6>
 8005484:	efff69f3 	.word	0xefff69f3
 8005488:	40008000 	.word	0x40008000
 800548c:	40013800 	.word	0x40013800
 8005490:	40021000 	.word	0x40021000
 8005494:	40004400 	.word	0x40004400
 8005498:	40004800 	.word	0x40004800
 800549c:	40004c00 	.word	0x40004c00
 80054a0:	40005000 	.word	0x40005000
 80054a4:	2310      	movs	r3, #16
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a9f      	ldr	r2, [pc, #636]	; (800572c <UART_SetConfig+0x568>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d17a      	bne.n	80055aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d824      	bhi.n	8005506 <UART_SetConfig+0x342>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0x300>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	08005507 	.word	0x08005507
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	08005507 	.word	0x08005507
 80054d4:	080054f7 	.word	0x080054f7
 80054d8:	08005507 	.word	0x08005507
 80054dc:	08005507 	.word	0x08005507
 80054e0:	08005507 	.word	0x08005507
 80054e4:	080054ff 	.word	0x080054ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fe fb86 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80054ec:	61f8      	str	r0, [r7, #28]
        break;
 80054ee:	e010      	b.n	8005512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f0:	4b8f      	ldr	r3, [pc, #572]	; (8005730 <UART_SetConfig+0x56c>)
 80054f2:	61fb      	str	r3, [r7, #28]
        break;
 80054f4:	e00d      	b.n	8005512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f6:	f7fe fae7 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 80054fa:	61f8      	str	r0, [r7, #28]
        break;
 80054fc:	e009      	b.n	8005512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005502:	61fb      	str	r3, [r7, #28]
        break;
 8005504:	e005      	b.n	8005512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80fb 	beq.w	8005710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4613      	mov	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	429a      	cmp	r2, r3
 8005528:	d305      	bcc.n	8005536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	429a      	cmp	r2, r3
 8005534:	d903      	bls.n	800553e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800553c:	e0e8      	b.n	8005710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2200      	movs	r2, #0
 8005542:	461c      	mov	r4, r3
 8005544:	4615      	mov	r5, r2
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	022b      	lsls	r3, r5, #8
 8005550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005554:	0222      	lsls	r2, r4, #8
 8005556:	68f9      	ldr	r1, [r7, #12]
 8005558:	6849      	ldr	r1, [r1, #4]
 800555a:	0849      	lsrs	r1, r1, #1
 800555c:	2000      	movs	r0, #0
 800555e:	4688      	mov	r8, r1
 8005560:	4681      	mov	r9, r0
 8005562:	eb12 0a08 	adds.w	sl, r2, r8
 8005566:	eb43 0b09 	adc.w	fp, r3, r9
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005578:	4650      	mov	r0, sl
 800557a:	4659      	mov	r1, fp
 800557c:	f7fb fa96 	bl	8000aac <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4613      	mov	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558e:	d308      	bcc.n	80055a2 <UART_SetConfig+0x3de>
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005596:	d204      	bcs.n	80055a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e0b6      	b.n	8005710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055a8:	e0b2      	b.n	8005710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b2:	d15e      	bne.n	8005672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d828      	bhi.n	800560e <UART_SetConfig+0x44a>
 80055bc:	a201      	add	r2, pc, #4	; (adr r2, 80055c4 <UART_SetConfig+0x400>)
 80055be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c2:	bf00      	nop
 80055c4:	080055e9 	.word	0x080055e9
 80055c8:	080055f1 	.word	0x080055f1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	0800560f 	.word	0x0800560f
 80055d4:	080055ff 	.word	0x080055ff
 80055d8:	0800560f 	.word	0x0800560f
 80055dc:	0800560f 	.word	0x0800560f
 80055e0:	0800560f 	.word	0x0800560f
 80055e4:	08005607 	.word	0x08005607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e8:	f7fe fb06 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80055ec:	61f8      	str	r0, [r7, #28]
        break;
 80055ee:	e014      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f0:	f7fe fb18 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 80055f4:	61f8      	str	r0, [r7, #28]
        break;
 80055f6:	e010      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f8:	4b4d      	ldr	r3, [pc, #308]	; (8005730 <UART_SetConfig+0x56c>)
 80055fa:	61fb      	str	r3, [r7, #28]
        break;
 80055fc:	e00d      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fe:	f7fe fa63 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8005602:	61f8      	str	r0, [r7, #28]
        break;
 8005604:	e009      	b.n	800561a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560a:	61fb      	str	r3, [r7, #28]
        break;
 800560c:	e005      	b.n	800561a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d077      	beq.n	8005710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005a      	lsls	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	085b      	lsrs	r3, r3, #1
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d916      	bls.n	800566a <UART_SetConfig+0x4a6>
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005642:	d212      	bcs.n	800566a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f023 030f 	bic.w	r3, r3, #15
 800564c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	b29b      	uxth	r3, r3
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	b29a      	uxth	r2, r3
 800565a:	8afb      	ldrh	r3, [r7, #22]
 800565c:	4313      	orrs	r3, r2
 800565e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	8afa      	ldrh	r2, [r7, #22]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e052      	b.n	8005710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005670:	e04e      	b.n	8005710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005676:	2b08      	cmp	r3, #8
 8005678:	d827      	bhi.n	80056ca <UART_SetConfig+0x506>
 800567a:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0x4bc>)
 800567c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056ad 	.word	0x080056ad
 8005688:	080056b5 	.word	0x080056b5
 800568c:	080056cb 	.word	0x080056cb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056cb 	.word	0x080056cb
 8005698:	080056cb 	.word	0x080056cb
 800569c:	080056cb 	.word	0x080056cb
 80056a0:	080056c3 	.word	0x080056c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fe faa8 	bl	8003bf8 <HAL_RCC_GetPCLK1Freq>
 80056a8:	61f8      	str	r0, [r7, #28]
        break;
 80056aa:	e014      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ac:	f7fe faba 	bl	8003c24 <HAL_RCC_GetPCLK2Freq>
 80056b0:	61f8      	str	r0, [r7, #28]
        break;
 80056b2:	e010      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b4:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <UART_SetConfig+0x56c>)
 80056b6:	61fb      	str	r3, [r7, #28]
        break;
 80056b8:	e00d      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ba:	f7fe fa05 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 80056be:	61f8      	str	r0, [r7, #28]
        break;
 80056c0:	e009      	b.n	80056d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c6:	61fb      	str	r3, [r7, #28]
        break;
 80056c8:	e005      	b.n	80056d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056d4:	bf00      	nop
    }

    if (pclk != 0U)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d019      	beq.n	8005710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	085a      	lsrs	r2, r3, #1
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	441a      	add	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	d909      	bls.n	800570a <UART_SetConfig+0x546>
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d205      	bcs.n	800570a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60da      	str	r2, [r3, #12]
 8005708:	e002      	b.n	8005710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800571c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005720:	4618      	mov	r0, r3
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800572a:	bf00      	nop
 800572c:	40008000 	.word	0x40008000
 8005730:	00f42400 	.word	0x00f42400

08005734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01a      	beq.n	800584a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005832:	d10a      	bne.n	800584a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af02      	add	r7, sp, #8
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005888:	f7fb fc12 	bl	80010b0 <HAL_GetTick>
 800588c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d10e      	bne.n	80058ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f82d 	bl	800590a <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e023      	b.n	8005902 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d10e      	bne.n	80058e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f817 	bl	800590a <UART_WaitOnFlagUntilTimeout>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e00d      	b.n	8005902 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b09c      	sub	sp, #112	; 0x70
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	4613      	mov	r3, r2
 8005918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591a:	e0a5      	b.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005922:	f000 80a1 	beq.w	8005a68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fb fbc3 	bl	80010b0 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <UART_WaitOnFlagUntilTimeout+0x32>
 8005936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005938:	2b00      	cmp	r3, #0
 800593a:	d13e      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005950:	667b      	str	r3, [r7, #100]	; 0x64
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800595c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e6      	bne.n	800593c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	663b      	str	r3, [r7, #96]	; 0x60
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800598e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005990:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800599c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e067      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d04f      	beq.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d6:	d147      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
 8005a02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e6      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	613b      	str	r3, [r7, #16]
   return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f023 0301 	bic.w	r3, r3, #1
 8005a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a34:	623a      	str	r2, [r7, #32]
 8005a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	6a3a      	ldr	r2, [r7, #32]
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e5      	bne.n	8005a14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e010      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	f43f af4a 	beq.w	800591c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3770      	adds	r7, #112	; 0x70
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <HAL_GPIO_EXTI_Callback>:
uint16_t sin_values_3[90];

//0: 0.56ms / 1: 0.78ms / 2: 1.0ms
int switchIndex=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
       if(GPIO_PIN == myButton_Pin){
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa4:	d14d      	bne.n	8005b42 <HAL_GPIO_EXTI_Callback+0xae>
              HAL_GPIO_TogglePin(myLED_GPIO_Port, myLED_Pin);
 8005aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005aaa:	4828      	ldr	r0, [pc, #160]	; (8005b4c <HAL_GPIO_EXTI_Callback+0xb8>)
 8005aac:	f7fc fc70 	bl	8002390 <HAL_GPIO_TogglePin>

              if(switchIndex==0){
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d114      	bne.n	8005ae2 <HAL_GPIO_EXTI_Callback+0x4e>
            	  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4826      	ldr	r0, [pc, #152]	; (8005b54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005abc:	f7fb fd74 	bl	80015a8 <HAL_DAC_Stop_DMA>
            	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,sin_values_1,period_1,DAC_ALIGN_12B_R);
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <HAL_GPIO_EXTI_Callback+0xc8>)
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4820      	ldr	r0, [pc, #128]	; (8005b54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005ad2:	f7fb fc9d 	bl	8001410 <HAL_DAC_Start_DMA>
            	  switchIndex++;
 8005ad6:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005ade:	6013      	str	r3, [r2, #0]
              }

       } else {
              __NOP();
       }
}
 8005ae0:	e030      	b.n	8005b44 <HAL_GPIO_EXTI_Callback+0xb0>
              }else if(switchIndex==1){
 8005ae2:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d114      	bne.n	8005b14 <HAL_GPIO_EXTI_Callback+0x80>
            	  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005aea:	2100      	movs	r1, #0
 8005aec:	4819      	ldr	r0, [pc, #100]	; (8005b54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005aee:	f7fb fd5b 	bl	80015a8 <HAL_DAC_Stop_DMA>
            	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,sin_values_2,period_2,DAC_ALIGN_12B_R);
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <HAL_GPIO_EXTI_Callback+0xcc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_GPIO_EXTI_Callback+0xd0>)
 8005b00:	2100      	movs	r1, #0
 8005b02:	4814      	ldr	r0, [pc, #80]	; (8005b54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005b04:	f7fb fc84 	bl	8001410 <HAL_DAC_Start_DMA>
            	  switchIndex++;
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005b10:	6013      	str	r3, [r2, #0]
}
 8005b12:	e017      	b.n	8005b44 <HAL_GPIO_EXTI_Callback+0xb0>
              }else if(switchIndex==2){
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d113      	bne.n	8005b44 <HAL_GPIO_EXTI_Callback+0xb0>
            	  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	480d      	ldr	r0, [pc, #52]	; (8005b54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005b20:	f7fb fd42 	bl	80015a8 <HAL_DAC_Stop_DMA>
            	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,sin_values_3,period_3,DAC_ALIGN_12B_R);
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <HAL_GPIO_EXTI_Callback+0xd4>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <HAL_GPIO_EXTI_Callback+0xd8>)
 8005b32:	2100      	movs	r1, #0
 8005b34:	4807      	ldr	r0, [pc, #28]	; (8005b54 <HAL_GPIO_EXTI_Callback+0xc0>)
 8005b36:	f7fb fc6b 	bl	8001410 <HAL_DAC_Start_DMA>
            	  switchIndex=0;
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_GPIO_EXTI_Callback+0xbc>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
}
 8005b40:	e000      	b.n	8005b44 <HAL_GPIO_EXTI_Callback+0xb0>
              __NOP();
 8005b42:	bf00      	nop
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	48000400 	.word	0x48000400
 8005b50:	20000460 	.word	0x20000460
 8005b54:	2000013c 	.word	0x2000013c
 8005b58:	2000003c 	.word	0x2000003c
 8005b5c:	200002bc 	.word	0x200002bc
 8005b60:	20000040 	.word	0x20000040
 8005b64:	20000320 	.word	0x20000320
 8005b68:	20000044 	.word	0x20000044
 8005b6c:	200003ac 	.word	0x200003ac

08005b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b70:	b5b0      	push	{r4, r5, r7, lr}
 8005b72:	b08a      	sub	sp, #40	; 0x28
 8005b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b76:	f7fb fa33 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b7a:	f000 f9b1 	bl	8005ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b7e:	f000 fb0f 	bl	80061a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b82:	f000 faef 	bl	8006164 <MX_DMA_Init>
  MX_DAC1_Init();
 8005b86:	f000 f9fd 	bl	8005f84 <MX_DAC1_Init>
  MX_TIM2_Init();
 8005b8a:	f000 fa6d 	bl	8006068 <MX_TIM2_Init>
  MX_I2C2_Init();
 8005b8e:	f000 fa2b 	bl	8005fe8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8005b92:	f000 fab7 	bl	8006104 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  BSP_ACCELERO_Init();
 8005b96:	f000 fcbd 	bl	8006514 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8005b9a:	48ad      	ldr	r0, [pc, #692]	; (8005e50 <main+0x2e0>)
 8005b9c:	f7fe fdcc 	bl	8004738 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	48ac      	ldr	r0, [pc, #688]	; (8005e54 <main+0x2e4>)
 8005ba4:	f7fb fbe7 	bl	8001376 <HAL_DAC_Start>



  for(int i=0;i<period_1;i++){
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e044      	b.n	8005c38 <main+0xc8>
	  float radians=2*pi*(i%period_1)/period_1;
 8005bae:	4baa      	ldr	r3, [pc, #680]	; (8005e58 <main+0x2e8>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	fb93 f1f2 	sdiv	r1, r3, r2
 8005bb8:	fb01 f202 	mul.w	r2, r1, r2
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fa fca8 	bl	8000514 <__aeabi_i2d>
 8005bc4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e48 <main+0x2d8>)
 8005bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bca:	f7fa fd0d 	bl	80005e8 <__aeabi_dmul>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4614      	mov	r4, r2
 8005bd4:	461d      	mov	r5, r3
 8005bd6:	4ba0      	ldr	r3, [pc, #640]	; (8005e58 <main+0x2e8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fa fc9a 	bl	8000514 <__aeabi_i2d>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa fe28 	bl	800083c <__aeabi_ddiv>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f7fa ff0a 	bl	8000a0c <__aeabi_d2f>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	607b      	str	r3, [r7, #4]
      sin_values_1[i]=4000*(arm_sin_f32(radians)+1)/2;
 8005bfc:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c00:	f000 ff2c 	bl	8006a5c <arm_sin_f32>
 8005c04:	eef0 7a40 	vmov.f32	s15, s0
 8005c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c10:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8005e5c <main+0x2ec>
 8005c14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c24:	ee17 3a90 	vmov	r3, s15
 8005c28:	b299      	uxth	r1, r3
 8005c2a:	4a8d      	ldr	r2, [pc, #564]	; (8005e60 <main+0x2f0>)
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<period_1;i++){
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	3301      	adds	r3, #1
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	4b87      	ldr	r3, [pc, #540]	; (8005e58 <main+0x2e8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	dbb5      	blt.n	8005bae <main+0x3e>
  }

  for(int i=0;i<period_2;i++){
 8005c42:	2300      	movs	r3, #0
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	e044      	b.n	8005cd2 <main+0x162>
	  float radians=2*pi*(i%period_2)/period_2;
 8005c48:	4b86      	ldr	r3, [pc, #536]	; (8005e64 <main+0x2f4>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c52:	fb01 f202 	mul.w	r2, r1, r2
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fa fc5b 	bl	8000514 <__aeabi_i2d>
 8005c5e:	a37a      	add	r3, pc, #488	; (adr r3, 8005e48 <main+0x2d8>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa fcc0 	bl	80005e8 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	461d      	mov	r5, r3
 8005c70:	4b7c      	ldr	r3, [pc, #496]	; (8005e64 <main+0x2f4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fa fc4d 	bl	8000514 <__aeabi_i2d>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa fddb 	bl	800083c <__aeabi_ddiv>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7fa febd 	bl	8000a0c <__aeabi_d2f>
 8005c92:	4603      	mov	r3, r0
 8005c94:	60bb      	str	r3, [r7, #8]
      sin_values_2[i]=4000*(arm_sin_f32(radians)+1)/2;
 8005c96:	ed97 0a02 	vldr	s0, [r7, #8]
 8005c9a:	f000 fedf 	bl	8006a5c <arm_sin_f32>
 8005c9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005caa:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005e5c <main+0x2ec>
 8005cae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005cb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cbe:	ee17 3a90 	vmov	r3, s15
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	4a68      	ldr	r2, [pc, #416]	; (8005e68 <main+0x2f8>)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<period_2;i++){
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	4b64      	ldr	r3, [pc, #400]	; (8005e64 <main+0x2f4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	dbb5      	blt.n	8005c48 <main+0xd8>
  }

  for(int i=0;i<period_3;i++){
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e044      	b.n	8005d6c <main+0x1fc>
	  float radians=2*pi*(i%period_3)/period_3;
 8005ce2:	4b62      	ldr	r3, [pc, #392]	; (8005e6c <main+0x2fc>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	fb93 f1f2 	sdiv	r1, r3, r2
 8005cec:	fb01 f202 	mul.w	r2, r1, r2
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fa fc0e 	bl	8000514 <__aeabi_i2d>
 8005cf8:	a353      	add	r3, pc, #332	; (adr r3, 8005e48 <main+0x2d8>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fc73 	bl	80005e8 <__aeabi_dmul>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4614      	mov	r4, r2
 8005d08:	461d      	mov	r5, r3
 8005d0a:	4b58      	ldr	r3, [pc, #352]	; (8005e6c <main+0x2fc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa fc00 	bl	8000514 <__aeabi_i2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f7fa fd8e 	bl	800083c <__aeabi_ddiv>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	f7fa fe70 	bl	8000a0c <__aeabi_d2f>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	60fb      	str	r3, [r7, #12]
      sin_values_3[i]=4000*(arm_sin_f32(radians)+1)/2;
 8005d30:	ed97 0a03 	vldr	s0, [r7, #12]
 8005d34:	f000 fe92 	bl	8006a5c <arm_sin_f32>
 8005d38:	eef0 7a40 	vmov.f32	s15, s0
 8005d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d44:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8005e5c <main+0x2ec>
 8005d48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005d50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d58:	ee17 3a90 	vmov	r3, s15
 8005d5c:	b299      	uxth	r1, r3
 8005d5e:	4a44      	ldr	r2, [pc, #272]	; (8005e70 <main+0x300>)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<period_3;i++){
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <main+0x2fc>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	dbb5      	blt.n	8005ce2 <main+0x172>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0;i<100;i++){
 8005d76:	2300      	movs	r3, #0
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	e007      	b.n	8005d8c <main+0x21c>
		  buffer[i]='\0';
 8005d7c:	4a3d      	ldr	r2, [pc, #244]	; (8005e74 <main+0x304>)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
	  for(int i=0;i<100;i++){
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b63      	cmp	r3, #99	; 0x63
 8005d90:	ddf4      	ble.n	8005d7c <main+0x20c>
	  }


	  BSP_ACCELERO_AccGetXYZ(accelero);
 8005d92:	4839      	ldr	r0, [pc, #228]	; (8005e78 <main+0x308>)
 8005d94:	f000 fbfc 	bl	8006590 <BSP_ACCELERO_AccGetXYZ>
	  sprintf(buffer, " [accelero:%d,%d,%d] \n", (int)accelero[0],(int)accelero[1],(int)accelero[2]);
 8005d98:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <main+0x308>)
 8005d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <main+0x308>)
 8005da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005da6:	4619      	mov	r1, r3
 8005da8:	4b33      	ldr	r3, [pc, #204]	; (8005e78 <main+0x308>)
 8005daa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	460b      	mov	r3, r1
 8005db2:	4932      	ldr	r1, [pc, #200]	; (8005e7c <main+0x30c>)
 8005db4:	482f      	ldr	r0, [pc, #188]	; (8005e74 <main+0x304>)
 8005db6:	f000 fec9 	bl	8006b4c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)&buffer, sizeof(buffer), HAL_MAX_DELAY);
 8005dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dbe:	2264      	movs	r2, #100	; 0x64
 8005dc0:	492c      	ldr	r1, [pc, #176]	; (8005e74 <main+0x304>)
 8005dc2:	482f      	ldr	r0, [pc, #188]	; (8005e80 <main+0x310>)
 8005dc4:	f7ff f96a 	bl	800509c <HAL_UART_Transmit>


	  if(accelero[2]>accelero[0] && accelero[2]>accelero[1]){
 8005dc8:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <main+0x308>)
 8005dca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005dce:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <main+0x308>)
 8005dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	dd17      	ble.n	8005e08 <main+0x298>
 8005dd8:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <main+0x308>)
 8005dda:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8005dde:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <main+0x308>)
 8005de0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	dd0f      	ble.n	8005e08 <main+0x298>
		  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005de8:	2100      	movs	r1, #0
 8005dea:	481a      	ldr	r0, [pc, #104]	; (8005e54 <main+0x2e4>)
 8005dec:	f7fb fbdc 	bl	80015a8 <HAL_DAC_Stop_DMA>
		  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,sin_values_2,period_2,DAC_ALIGN_12B_R);
 8005df0:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <main+0x2f4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	4a1a      	ldr	r2, [pc, #104]	; (8005e68 <main+0x2f8>)
 8005dfe:	2100      	movs	r1, #0
 8005e00:	4814      	ldr	r0, [pc, #80]	; (8005e54 <main+0x2e4>)
 8005e02:	f7fb fb05 	bl	8001410 <HAL_DAC_Start_DMA>
 8005e06:	e05e      	b.n	8005ec6 <main+0x356>
	  }else if(accelero[1]>accelero[0] && accelero[1]>accelero[2]){
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <main+0x308>)
 8005e0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005e0e:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <main+0x308>)
 8005e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	dd35      	ble.n	8005e84 <main+0x314>
 8005e18:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <main+0x308>)
 8005e1a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8005e1e:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <main+0x308>)
 8005e20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	dd2d      	ble.n	8005e84 <main+0x314>
		  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	480a      	ldr	r0, [pc, #40]	; (8005e54 <main+0x2e4>)
 8005e2c:	f7fb fbbc 	bl	80015a8 <HAL_DAC_Stop_DMA>
		  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,sin_values_1,period_1,DAC_ALIGN_12B_R);
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <main+0x2e8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <main+0x2f0>)
 8005e3e:	2100      	movs	r1, #0
 8005e40:	4804      	ldr	r0, [pc, #16]	; (8005e54 <main+0x2e4>)
 8005e42:	f7fb fae5 	bl	8001410 <HAL_DAC_Start_DMA>
 8005e46:	e03e      	b.n	8005ec6 <main+0x356>
 8005e48:	54442eea 	.word	0x54442eea
 8005e4c:	401921fb 	.word	0x401921fb
 8005e50:	200001ec 	.word	0x200001ec
 8005e54:	2000013c 	.word	0x2000013c
 8005e58:	2000003c 	.word	0x2000003c
 8005e5c:	457a0000 	.word	0x457a0000
 8005e60:	200002bc 	.word	0x200002bc
 8005e64:	20000040 	.word	0x20000040
 8005e68:	20000320 	.word	0x20000320
 8005e6c:	20000044 	.word	0x20000044
 8005e70:	200003ac 	.word	0x200003ac
 8005e74:	200000d8 	.word	0x200000d8
 8005e78:	200000d0 	.word	0x200000d0
 8005e7c:	08007440 	.word	0x08007440
 8005e80:	20000238 	.word	0x20000238
	  }else if(-accelero[1]>accelero[0] && -accelero[1]>accelero[2]){
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <main+0x360>)
 8005e86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e8a:	425b      	negs	r3, r3
 8005e8c:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <main+0x360>)
 8005e8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8005e92:	4293      	cmp	r3, r2
 8005e94:	dd17      	ble.n	8005ec6 <main+0x356>
 8005e96:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <main+0x360>)
 8005e98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e9c:	425b      	negs	r3, r3
 8005e9e:	4a0c      	ldr	r2, [pc, #48]	; (8005ed0 <main+0x360>)
 8005ea0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	dd0e      	ble.n	8005ec6 <main+0x356>
		  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	480a      	ldr	r0, [pc, #40]	; (8005ed4 <main+0x364>)
 8005eac:	f7fb fb7c 	bl	80015a8 <HAL_DAC_Stop_DMA>
		  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,sin_values_3,period_3,DAC_ALIGN_12B_R);
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <main+0x368>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	4a07      	ldr	r2, [pc, #28]	; (8005edc <main+0x36c>)
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4804      	ldr	r0, [pc, #16]	; (8005ed4 <main+0x364>)
 8005ec2:	f7fb faa5 	bl	8001410 <HAL_DAC_Start_DMA>
	  }

	  HAL_Delay(500);
 8005ec6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005eca:	f7fb f8fd 	bl	80010c8 <HAL_Delay>
	  for(int i=0;i<100;i++){
 8005ece:	e752      	b.n	8005d76 <main+0x206>
 8005ed0:	200000d0 	.word	0x200000d0
 8005ed4:	2000013c 	.word	0x2000013c
 8005ed8:	20000044 	.word	0x20000044
 8005edc:	200003ac 	.word	0x200003ac

08005ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b096      	sub	sp, #88	; 0x58
 8005ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ee6:	f107 0314 	add.w	r3, r7, #20
 8005eea:	2244      	movs	r2, #68	; 0x44
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fe24 	bl	8006b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	609a      	str	r2, [r3, #8]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005f02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f06:	f7fd f8ad 	bl	8003064 <HAL_PWREx_ControlVoltageScaling>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005f10:	f000 f9aa 	bl	8006268 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005f14:	2310      	movs	r3, #16
 8005f16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005f20:	2360      	movs	r3, #96	; 0x60
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f24:	2302      	movs	r3, #2
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005f30:	2328      	movs	r3, #40	; 0x28
 8005f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005f34:	2307      	movs	r3, #7
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f38:	2302      	movs	r3, #2
 8005f3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fd f8e3 	bl	8003110 <HAL_RCC_OscConfig>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8005f50:	f000 f98a 	bl	8006268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f54:	230f      	movs	r3, #15
 8005f56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005f68:	463b      	mov	r3, r7
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fd fcab 	bl	80038c8 <HAL_RCC_ClockConfig>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8005f78:	f000 f976 	bl	8006268 <Error_Handler>
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	3758      	adds	r7, #88	; 0x58
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	2224      	movs	r2, #36	; 0x24
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fdd3 	bl	8006b3c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8005f96:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <MX_DAC1_Init+0x5c>)
 8005f98:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <MX_DAC1_Init+0x60>)
 8005f9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005f9c:	4810      	ldr	r0, [pc, #64]	; (8005fe0 <MX_DAC1_Init+0x5c>)
 8005f9e:	f7fb f9c8 	bl	8001332 <HAL_DAC_Init>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005fa8:	f000 f95e 	bl	8006268 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8005fb0:	2324      	movs	r3, #36	; 0x24
 8005fb2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4806      	ldr	r0, [pc, #24]	; (8005fe0 <MX_DAC1_Init+0x5c>)
 8005fc8:	f7fb fb51 	bl	800166e <HAL_DAC_ConfigChannel>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8005fd2:	f000 f949 	bl	8006268 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005fd6:	bf00      	nop
 8005fd8:	3728      	adds	r7, #40	; 0x28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	2000013c 	.word	0x2000013c
 8005fe4:	40007400 	.word	0x40007400

08005fe8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	; (800605c <MX_I2C2_Init+0x74>)
 8005fee:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <MX_I2C2_Init+0x78>)
 8005ff0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <MX_I2C2_Init+0x74>)
 8005ff4:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <MX_I2C2_Init+0x7c>)
 8005ff6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005ff8:	4b18      	ldr	r3, [pc, #96]	; (800605c <MX_I2C2_Init+0x74>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ffe:	4b17      	ldr	r3, [pc, #92]	; (800605c <MX_I2C2_Init+0x74>)
 8006000:	2201      	movs	r2, #1
 8006002:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <MX_I2C2_Init+0x74>)
 8006006:	2200      	movs	r2, #0
 8006008:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <MX_I2C2_Init+0x74>)
 800600c:	2200      	movs	r2, #0
 800600e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <MX_I2C2_Init+0x74>)
 8006012:	2200      	movs	r2, #0
 8006014:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006016:	4b11      	ldr	r3, [pc, #68]	; (800605c <MX_I2C2_Init+0x74>)
 8006018:	2200      	movs	r2, #0
 800601a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <MX_I2C2_Init+0x74>)
 800601e:	2200      	movs	r2, #0
 8006020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006022:	480e      	ldr	r0, [pc, #56]	; (800605c <MX_I2C2_Init+0x74>)
 8006024:	f7fc f9e6 	bl	80023f4 <HAL_I2C_Init>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800602e:	f000 f91b 	bl	8006268 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006032:	2100      	movs	r1, #0
 8006034:	4809      	ldr	r0, [pc, #36]	; (800605c <MX_I2C2_Init+0x74>)
 8006036:	f7fc ff6f 	bl	8002f18 <HAL_I2CEx_ConfigAnalogFilter>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006040:	f000 f912 	bl	8006268 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006044:	2100      	movs	r1, #0
 8006046:	4805      	ldr	r0, [pc, #20]	; (800605c <MX_I2C2_Init+0x74>)
 8006048:	f7fc ffb1 	bl	8002fae <HAL_I2CEx_ConfigDigitalFilter>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006052:	f000 f909 	bl	8006268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000198 	.word	0x20000198
 8006060:	40005800 	.word	0x40005800
 8006064:	10909cec 	.word	0x10909cec

08006068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800606e:	f107 0310 	add.w	r3, r7, #16
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	605a      	str	r2, [r3, #4]
 8006078:	609a      	str	r2, [r3, #8]
 800607a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800607c:	1d3b      	adds	r3, r7, #4
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006086:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <MX_TIM2_Init+0x98>)
 8006088:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800608c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800608e:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <MX_TIM2_Init+0x98>)
 8006090:	2200      	movs	r2, #0
 8006092:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006094:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <MX_TIM2_Init+0x98>)
 8006096:	2200      	movs	r2, #0
 8006098:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 800609a:	4b19      	ldr	r3, [pc, #100]	; (8006100 <MX_TIM2_Init+0x98>)
 800609c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060a2:	4b17      	ldr	r3, [pc, #92]	; (8006100 <MX_TIM2_Init+0x98>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060a8:	4b15      	ldr	r3, [pc, #84]	; (8006100 <MX_TIM2_Init+0x98>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80060ae:	4814      	ldr	r0, [pc, #80]	; (8006100 <MX_TIM2_Init+0x98>)
 80060b0:	f7fe faea 	bl	8004688 <HAL_TIM_Base_Init>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80060ba:	f000 f8d5 	bl	8006268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80060c4:	f107 0310 	add.w	r3, r7, #16
 80060c8:	4619      	mov	r1, r3
 80060ca:	480d      	ldr	r0, [pc, #52]	; (8006100 <MX_TIM2_Init+0x98>)
 80060cc:	f7fe fcc3 	bl	8004a56 <HAL_TIM_ConfigClockSource>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80060d6:	f000 f8c7 	bl	8006268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80060da:	2320      	movs	r3, #32
 80060dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4806      	ldr	r0, [pc, #24]	; (8006100 <MX_TIM2_Init+0x98>)
 80060e8:	f7fe fee4 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80060f2:	f000 f8b9 	bl	8006268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80060f6:	bf00      	nop
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200001ec 	.word	0x200001ec

08006104 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006108:	4b14      	ldr	r3, [pc, #80]	; (800615c <MX_USART1_UART_Init+0x58>)
 800610a:	4a15      	ldr	r2, [pc, #84]	; (8006160 <MX_USART1_UART_Init+0x5c>)
 800610c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006114:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006118:	2200      	movs	r2, #0
 800611a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800611c:	4b0f      	ldr	r3, [pc, #60]	; (800615c <MX_USART1_UART_Init+0x58>)
 800611e:	2200      	movs	r2, #0
 8006120:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006122:	4b0e      	ldr	r3, [pc, #56]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006124:	2200      	movs	r2, #0
 8006126:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006128:	4b0c      	ldr	r3, [pc, #48]	; (800615c <MX_USART1_UART_Init+0x58>)
 800612a:	220c      	movs	r2, #12
 800612c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006130:	2200      	movs	r2, #0
 8006132:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006134:	4b09      	ldr	r3, [pc, #36]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006136:	2200      	movs	r2, #0
 8006138:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800613a:	4b08      	ldr	r3, [pc, #32]	; (800615c <MX_USART1_UART_Init+0x58>)
 800613c:	2200      	movs	r2, #0
 800613e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006140:	4b06      	ldr	r3, [pc, #24]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006142:	2200      	movs	r2, #0
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006146:	4805      	ldr	r0, [pc, #20]	; (800615c <MX_USART1_UART_Init+0x58>)
 8006148:	f7fe ff5a 	bl	8005000 <HAL_UART_Init>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006152:	f000 f889 	bl	8006268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000238 	.word	0x20000238
 8006160:	40013800 	.word	0x40013800

08006164 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <MX_DMA_Init+0x38>)
 800616c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616e:	4a0b      	ldr	r2, [pc, #44]	; (800619c <MX_DMA_Init+0x38>)
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	6493      	str	r3, [r2, #72]	; 0x48
 8006176:	4b09      	ldr	r3, [pc, #36]	; (800619c <MX_DMA_Init+0x38>)
 8006178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	607b      	str	r3, [r7, #4]
 8006180:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006182:	2200      	movs	r2, #0
 8006184:	2100      	movs	r1, #0
 8006186:	200d      	movs	r0, #13
 8006188:	f7fb f89d 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800618c:	200d      	movs	r0, #13
 800618e:	f7fb f8b6 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	40021000 	.word	0x40021000

080061a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061a6:	f107 030c 	add.w	r3, r7, #12
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	605a      	str	r2, [r3, #4]
 80061b0:	609a      	str	r2, [r3, #8]
 80061b2:	60da      	str	r2, [r3, #12]
 80061b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061b6:	4b29      	ldr	r3, [pc, #164]	; (800625c <MX_GPIO_Init+0xbc>)
 80061b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ba:	4a28      	ldr	r2, [pc, #160]	; (800625c <MX_GPIO_Init+0xbc>)
 80061bc:	f043 0304 	orr.w	r3, r3, #4
 80061c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061c2:	4b26      	ldr	r3, [pc, #152]	; (800625c <MX_GPIO_Init+0xbc>)
 80061c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ce:	4b23      	ldr	r3, [pc, #140]	; (800625c <MX_GPIO_Init+0xbc>)
 80061d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d2:	4a22      	ldr	r2, [pc, #136]	; (800625c <MX_GPIO_Init+0xbc>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <MX_GPIO_Init+0xbc>)
 80061dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061e6:	4b1d      	ldr	r3, [pc, #116]	; (800625c <MX_GPIO_Init+0xbc>)
 80061e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ea:	4a1c      	ldr	r2, [pc, #112]	; (800625c <MX_GPIO_Init+0xbc>)
 80061ec:	f043 0302 	orr.w	r3, r3, #2
 80061f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061f2:	4b1a      	ldr	r3, [pc, #104]	; (800625c <MX_GPIO_Init+0xbc>)
 80061f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLED_GPIO_Port, myLED_Pin, GPIO_PIN_RESET);
 80061fe:	2200      	movs	r2, #0
 8006200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006204:	4816      	ldr	r0, [pc, #88]	; (8006260 <MX_GPIO_Init+0xc0>)
 8006206:	f7fc f8ab 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 800620a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800620e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006210:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	4619      	mov	r1, r3
 8006220:	4810      	ldr	r0, [pc, #64]	; (8006264 <MX_GPIO_Init+0xc4>)
 8006222:	f7fb fdff 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLED_Pin */
  GPIO_InitStruct.Pin = myLED_Pin;
 8006226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800622a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800622c:	2301      	movs	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006234:	2300      	movs	r3, #0
 8006236:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLED_GPIO_Port, &GPIO_InitStruct);
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4619      	mov	r1, r3
 800623e:	4808      	ldr	r0, [pc, #32]	; (8006260 <MX_GPIO_Init+0xc0>)
 8006240:	f7fb fdf0 	bl	8001e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006244:	2200      	movs	r2, #0
 8006246:	2100      	movs	r1, #0
 8006248:	2028      	movs	r0, #40	; 0x28
 800624a:	f7fb f83c 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800624e:	2028      	movs	r0, #40	; 0x28
 8006250:	f7fb f855 	bl	80012fe <HAL_NVIC_EnableIRQ>

}
 8006254:	bf00      	nop
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	48000400 	.word	0x48000400
 8006264:	48000800 	.word	0x48000800

08006268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800626c:	b672      	cpsid	i
}
 800626e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006270:	e7fe      	b.n	8006270 <Error_Handler+0x8>
	...

08006274 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	; 0x28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800627c:	4b27      	ldr	r3, [pc, #156]	; (800631c <I2Cx_MspInit+0xa8>)
 800627e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006280:	4a26      	ldr	r2, [pc, #152]	; (800631c <I2Cx_MspInit+0xa8>)
 8006282:	f043 0302 	orr.w	r3, r3, #2
 8006286:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006288:	4b24      	ldr	r3, [pc, #144]	; (800631c <I2Cx_MspInit+0xa8>)
 800628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006294:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006298:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800629a:	2312      	movs	r3, #18
 800629c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800629e:	2301      	movs	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a2:	2303      	movs	r3, #3
 80062a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80062a6:	2304      	movs	r3, #4
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062aa:	f107 0314 	add.w	r3, r7, #20
 80062ae:	4619      	mov	r1, r3
 80062b0:	481b      	ldr	r0, [pc, #108]	; (8006320 <I2Cx_MspInit+0xac>)
 80062b2:	f7fb fdb7 	bl	8001e24 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	4619      	mov	r1, r3
 80062bc:	4818      	ldr	r0, [pc, #96]	; (8006320 <I2Cx_MspInit+0xac>)
 80062be:	f7fb fdb1 	bl	8001e24 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80062c2:	4b16      	ldr	r3, [pc, #88]	; (800631c <I2Cx_MspInit+0xa8>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	4a15      	ldr	r2, [pc, #84]	; (800631c <I2Cx_MspInit+0xa8>)
 80062c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062cc:	6593      	str	r3, [r2, #88]	; 0x58
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <I2Cx_MspInit+0xa8>)
 80062d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80062da:	4b10      	ldr	r3, [pc, #64]	; (800631c <I2Cx_MspInit+0xa8>)
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	4a0f      	ldr	r2, [pc, #60]	; (800631c <I2Cx_MspInit+0xa8>)
 80062e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80062e6:	4b0d      	ldr	r3, [pc, #52]	; (800631c <I2Cx_MspInit+0xa8>)
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	4a0c      	ldr	r2, [pc, #48]	; (800631c <I2Cx_MspInit+0xa8>)
 80062ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80062f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80062f2:	2200      	movs	r2, #0
 80062f4:	210f      	movs	r1, #15
 80062f6:	2021      	movs	r0, #33	; 0x21
 80062f8:	f7fa ffe5 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80062fc:	2021      	movs	r0, #33	; 0x21
 80062fe:	f7fa fffe 	bl	80012fe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006302:	2200      	movs	r2, #0
 8006304:	210f      	movs	r1, #15
 8006306:	2022      	movs	r0, #34	; 0x22
 8006308:	f7fa ffdd 	bl	80012c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800630c:	2022      	movs	r0, #34	; 0x22
 800630e:	f7fa fff6 	bl	80012fe <HAL_NVIC_EnableIRQ>
}
 8006312:	bf00      	nop
 8006314:	3728      	adds	r7, #40	; 0x28
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40021000 	.word	0x40021000
 8006320:	48000400 	.word	0x48000400

08006324 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a12      	ldr	r2, [pc, #72]	; (8006378 <I2Cx_Init+0x54>)
 8006330:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <I2Cx_Init+0x58>)
 8006336:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ff89 	bl	8006274 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fc f846 	bl	80023f4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fc fdd4 	bl	8002f18 <HAL_I2CEx_ConfigAnalogFilter>
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40005800 	.word	0x40005800
 800637c:	00702681 	.word	0x00702681

08006380 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af04      	add	r7, sp, #16
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	72fb      	strb	r3, [r7, #11]
 8006392:	460b      	mov	r3, r1
 8006394:	813b      	strh	r3, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	b299      	uxth	r1, r3
 80063a2:	88f8      	ldrh	r0, [r7, #6]
 80063a4:	893a      	ldrh	r2, [r7, #8]
 80063a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063aa:	9302      	str	r3, [sp, #8]
 80063ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4603      	mov	r3, r0
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7fc f9ee 	bl	8002798 <HAL_I2C_Mem_Read>
 80063bc:	4603      	mov	r3, r0
 80063be:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80063c6:	7afb      	ldrb	r3, [r7, #11]
 80063c8:	4619      	mov	r1, r3
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 f832 	bl	8006434 <I2Cx_Error>
  }
  return status;
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b08a      	sub	sp, #40	; 0x28
 80063de:	af04      	add	r7, sp, #16
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	461a      	mov	r2, r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	72fb      	strb	r3, [r7, #11]
 80063ec:	460b      	mov	r3, r1
 80063ee:	813b      	strh	r3, [r7, #8]
 80063f0:	4613      	mov	r3, r2
 80063f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	b299      	uxth	r1, r3
 80063fc:	88f8      	ldrh	r0, [r7, #6]
 80063fe:	893a      	ldrh	r2, [r7, #8]
 8006400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006404:	9302      	str	r3, [sp, #8]
 8006406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4603      	mov	r3, r0
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7fc f8ad 	bl	8002570 <HAL_I2C_Mem_Write>
 8006416:	4603      	mov	r3, r0
 8006418:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d004      	beq.n	800642a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	4619      	mov	r1, r3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f805 	bl	8006434 <I2Cx_Error>
  }
  return status;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc f866 	bl	8002512 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff ff6c 	bl	8006324 <I2Cx_Init>
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <SENSOR_IO_Init+0x10>)
 800645a:	f7ff ff63 	bl	8006324 <I2Cx_Init>
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000464 	.word	0x20000464

08006468 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af02      	add	r7, sp, #8
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	460b      	mov	r3, r1
 8006474:	71bb      	strb	r3, [r7, #6]
 8006476:	4613      	mov	r3, r2
 8006478:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800647a:	79bb      	ldrb	r3, [r7, #6]
 800647c:	b29a      	uxth	r2, r3
 800647e:	79f9      	ldrb	r1, [r7, #7]
 8006480:	2301      	movs	r3, #1
 8006482:	9301      	str	r3, [sp, #4]
 8006484:	1d7b      	adds	r3, r7, #5
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	2301      	movs	r3, #1
 800648a:	4803      	ldr	r0, [pc, #12]	; (8006498 <SENSOR_IO_Write+0x30>)
 800648c:	f7ff ffa5 	bl	80063da <I2Cx_WriteMultiple>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000464 	.word	0x20000464

0800649c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	4603      	mov	r3, r0
 80064a4:	460a      	mov	r2, r1
 80064a6:	71fb      	strb	r3, [r7, #7]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80064b0:	79bb      	ldrb	r3, [r7, #6]
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	79f9      	ldrb	r1, [r7, #7]
 80064b6:	2301      	movs	r3, #1
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	f107 030f 	add.w	r3, r7, #15
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2301      	movs	r3, #1
 80064c2:	4804      	ldr	r0, [pc, #16]	; (80064d4 <SENSOR_IO_Read+0x38>)
 80064c4:	f7ff ff5c 	bl	8006380 <I2Cx_ReadMultiple>

  return read_value;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000464 	.word	0x20000464

080064d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af02      	add	r7, sp, #8
 80064de:	603a      	str	r2, [r7, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
 80064e6:	460b      	mov	r3, r1
 80064e8:	71bb      	strb	r3, [r7, #6]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80064ee:	79bb      	ldrb	r3, [r7, #6]
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	79f9      	ldrb	r1, [r7, #7]
 80064f4:	88bb      	ldrh	r3, [r7, #4]
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	2301      	movs	r3, #1
 80064fe:	4804      	ldr	r0, [pc, #16]	; (8006510 <SENSOR_IO_ReadMultiple+0x38>)
 8006500:	f7ff ff3e 	bl	8006380 <I2Cx_ReadMultiple>
 8006504:	4603      	mov	r3, r0
 8006506:	b29b      	uxth	r3, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000464 	.word	0x20000464

08006514 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800651e:	2300      	movs	r3, #0
 8006520:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006522:	4b19      	ldr	r3, [pc, #100]	; (8006588 <BSP_ACCELERO_Init+0x74>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	4798      	blx	r3
 8006528:	4603      	mov	r3, r0
 800652a:	2b6a      	cmp	r3, #106	; 0x6a
 800652c:	d002      	beq.n	8006534 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
 8006532:	e024      	b.n	800657e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <BSP_ACCELERO_Init+0x78>)
 8006536:	4a14      	ldr	r2, [pc, #80]	; (8006588 <BSP_ACCELERO_Init+0x74>)
 8006538:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800653a:	2330      	movs	r3, #48	; 0x30
 800653c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8006542:	2300      	movs	r3, #0
 8006544:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8006552:	797a      	ldrb	r2, [r7, #5]
 8006554:	7abb      	ldrb	r3, [r7, #10]
 8006556:	4313      	orrs	r3, r2
 8006558:	b2db      	uxtb	r3, r3
 800655a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800655c:	7a3b      	ldrb	r3, [r7, #8]
 800655e:	f043 0304 	orr.w	r3, r3, #4
 8006562:	b2db      	uxtb	r3, r3
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	b21a      	sxth	r2, r3
 8006568:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	b21b      	sxth	r3, r3
 8006570:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <BSP_ACCELERO_Init+0x78>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	89ba      	ldrh	r2, [r7, #12]
 800657a:	4610      	mov	r0, r2
 800657c:	4798      	blx	r3
  }  

  return ret;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000000 	.word	0x20000000
 800658c:	200004b8 	.word	0x200004b8

08006590 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8006598:	4b08      	ldr	r3, [pc, #32]	; (80065bc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80065aa:	4b04      	ldr	r3, [pc, #16]	; (80065bc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	4798      	blx	r3
    }
  }
}
 80065b4:	bf00      	nop
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	200004b8 	.word	0x200004b8

080065c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c6:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <HAL_MspInit+0x44>)
 80065c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ca:	4a0e      	ldr	r2, [pc, #56]	; (8006604 <HAL_MspInit+0x44>)
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	6613      	str	r3, [r2, #96]	; 0x60
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <HAL_MspInit+0x44>)
 80065d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_MspInit+0x44>)
 80065e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e2:	4a08      	ldr	r2, [pc, #32]	; (8006604 <HAL_MspInit+0x44>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e8:	6593      	str	r3, [r2, #88]	; 0x58
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_MspInit+0x44>)
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40021000 	.word	0x40021000

08006608 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	; 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006610:	f107 0314 	add.w	r3, r7, #20
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	60da      	str	r2, [r3, #12]
 800661e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2b      	ldr	r2, [pc, #172]	; (80066d4 <HAL_DAC_MspInit+0xcc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d14f      	bne.n	80066ca <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800662a:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <HAL_DAC_MspInit+0xd0>)
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <HAL_DAC_MspInit+0xd0>)
 8006630:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006634:	6593      	str	r3, [r2, #88]	; 0x58
 8006636:	4b28      	ldr	r3, [pc, #160]	; (80066d8 <HAL_DAC_MspInit+0xd0>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006642:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <HAL_DAC_MspInit+0xd0>)
 8006644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006646:	4a24      	ldr	r2, [pc, #144]	; (80066d8 <HAL_DAC_MspInit+0xd0>)
 8006648:	f043 0301 	orr.w	r3, r3, #1
 800664c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800664e:	4b22      	ldr	r3, [pc, #136]	; (80066d8 <HAL_DAC_MspInit+0xd0>)
 8006650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800665a:	2310      	movs	r3, #16
 800665c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800665e:	2303      	movs	r3, #3
 8006660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	4619      	mov	r1, r3
 800666c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006670:	f7fb fbd8 	bl	8001e24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8006674:	4b19      	ldr	r3, [pc, #100]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 8006676:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <HAL_DAC_MspInit+0xd8>)
 8006678:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800667a:	4b18      	ldr	r3, [pc, #96]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 800667c:	2206      	movs	r2, #6
 800667e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006680:	4b16      	ldr	r3, [pc, #88]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 8006682:	2210      	movs	r2, #16
 8006684:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 8006688:	2200      	movs	r2, #0
 800668a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800668c:	4b13      	ldr	r3, [pc, #76]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 800668e:	2280      	movs	r2, #128	; 0x80
 8006690:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006692:	4b12      	ldr	r3, [pc, #72]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 8006694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006698:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800669a:	4b10      	ldr	r3, [pc, #64]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 800669c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066a0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80066a2:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 80066a4:	2220      	movs	r2, #32
 80066a6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80066ae:	480b      	ldr	r0, [pc, #44]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 80066b0:	f7fb f982 	bl	80019b8 <HAL_DMA_Init>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80066ba:	f7ff fdd5 	bl	8006268 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a06      	ldr	r2, [pc, #24]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 80066c2:	609a      	str	r2, [r3, #8]
 80066c4:	4a05      	ldr	r2, [pc, #20]	; (80066dc <HAL_DAC_MspInit+0xd4>)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80066ca:	bf00      	nop
 80066cc:	3728      	adds	r7, #40	; 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40007400 	.word	0x40007400
 80066d8:	40021000 	.word	0x40021000
 80066dc:	20000150 	.word	0x20000150
 80066e0:	40020030 	.word	0x40020030

080066e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b0ac      	sub	sp, #176	; 0xb0
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	609a      	str	r2, [r3, #8]
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066fc:	f107 0314 	add.w	r3, r7, #20
 8006700:	2288      	movs	r2, #136	; 0x88
 8006702:	2100      	movs	r1, #0
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fa19 	bl	8006b3c <memset>
  if(hi2c->Instance==I2C2)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a21      	ldr	r2, [pc, #132]	; (8006794 <HAL_I2C_MspInit+0xb0>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d13b      	bne.n	800678c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006718:	2300      	movs	r3, #0
 800671a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800671c:	f107 0314 	add.w	r3, r7, #20
 8006720:	4618      	mov	r0, r3
 8006722:	f7fd faf5 	bl	8003d10 <HAL_RCCEx_PeriphCLKConfig>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800672c:	f7ff fd9c 	bl	8006268 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006730:	4b19      	ldr	r3, [pc, #100]	; (8006798 <HAL_I2C_MspInit+0xb4>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006734:	4a18      	ldr	r2, [pc, #96]	; (8006798 <HAL_I2C_MspInit+0xb4>)
 8006736:	f043 0302 	orr.w	r3, r3, #2
 800673a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <HAL_I2C_MspInit+0xb4>)
 800673e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800674c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006750:	2312      	movs	r3, #18
 8006752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800675c:	2303      	movs	r3, #3
 800675e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006762:	2304      	movs	r3, #4
 8006764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006768:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800676c:	4619      	mov	r1, r3
 800676e:	480b      	ldr	r0, [pc, #44]	; (800679c <HAL_I2C_MspInit+0xb8>)
 8006770:	f7fb fb58 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <HAL_I2C_MspInit+0xb4>)
 8006776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006778:	4a07      	ldr	r2, [pc, #28]	; (8006798 <HAL_I2C_MspInit+0xb4>)
 800677a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800677e:	6593      	str	r3, [r2, #88]	; 0x58
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_I2C_MspInit+0xb4>)
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800678c:	bf00      	nop
 800678e:	37b0      	adds	r7, #176	; 0xb0
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40005800 	.word	0x40005800
 8006798:	40021000 	.word	0x40021000
 800679c:	48000400 	.word	0x48000400

080067a0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0b      	ldr	r2, [pc, #44]	; (80067dc <HAL_I2C_MspDeInit+0x3c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10f      	bne.n	80067d2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80067b2:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <HAL_I2C_MspDeInit+0x40>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	4a0a      	ldr	r2, [pc, #40]	; (80067e0 <HAL_I2C_MspDeInit+0x40>)
 80067b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80067bc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80067be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067c2:	4808      	ldr	r0, [pc, #32]	; (80067e4 <HAL_I2C_MspDeInit+0x44>)
 80067c4:	f7fb fcd8 	bl	8002178 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80067c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067cc:	4805      	ldr	r0, [pc, #20]	; (80067e4 <HAL_I2C_MspDeInit+0x44>)
 80067ce:	f7fb fcd3 	bl	8002178 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40005800 	.word	0x40005800
 80067e0:	40021000 	.word	0x40021000
 80067e4:	48000400 	.word	0x48000400

080067e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f8:	d113      	bne.n	8006822 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80067fa:	4b0c      	ldr	r3, [pc, #48]	; (800682c <HAL_TIM_Base_MspInit+0x44>)
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	4a0b      	ldr	r2, [pc, #44]	; (800682c <HAL_TIM_Base_MspInit+0x44>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6593      	str	r3, [r2, #88]	; 0x58
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_TIM_Base_MspInit+0x44>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	201c      	movs	r0, #28
 8006818:	f7fa fd55 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800681c:	201c      	movs	r0, #28
 800681e:	f7fa fd6e 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000

08006830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b0ac      	sub	sp, #176	; 0xb0
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006848:	f107 0314 	add.w	r3, r7, #20
 800684c:	2288      	movs	r2, #136	; 0x88
 800684e:	2100      	movs	r1, #0
 8006850:	4618      	mov	r0, r3
 8006852:	f000 f973 	bl	8006b3c <memset>
  if(huart->Instance==USART1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <HAL_UART_MspInit+0xb0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d13a      	bne.n	80068d6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006864:	2300      	movs	r3, #0
 8006866:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006868:	f107 0314 	add.w	r3, r7, #20
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd fa4f 	bl	8003d10 <HAL_RCCEx_PeriphCLKConfig>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006878:	f7ff fcf6 	bl	8006268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_UART_MspInit+0xb4>)
 800687e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006880:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <HAL_UART_MspInit+0xb4>)
 8006882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006886:	6613      	str	r3, [r2, #96]	; 0x60
 8006888:	4b16      	ldr	r3, [pc, #88]	; (80068e4 <HAL_UART_MspInit+0xb4>)
 800688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <HAL_UART_MspInit+0xb4>)
 8006896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006898:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <HAL_UART_MspInit+0xb4>)
 800689a:	f043 0302 	orr.w	r3, r3, #2
 800689e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <HAL_UART_MspInit+0xb4>)
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068ac:	23c0      	movs	r3, #192	; 0xc0
 80068ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b2:	2302      	movs	r3, #2
 80068b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068be:	2303      	movs	r3, #3
 80068c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80068c4:	2307      	movs	r3, #7
 80068c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80068ce:	4619      	mov	r1, r3
 80068d0:	4805      	ldr	r0, [pc, #20]	; (80068e8 <HAL_UART_MspInit+0xb8>)
 80068d2:	f7fb faa7 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80068d6:	bf00      	nop
 80068d8:	37b0      	adds	r7, #176	; 0xb0
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40013800 	.word	0x40013800
 80068e4:	40021000 	.word	0x40021000
 80068e8:	48000400 	.word	0x48000400

080068ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068f0:	e7fe      	b.n	80068f0 <NMI_Handler+0x4>

080068f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068f2:	b480      	push	{r7}
 80068f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068f6:	e7fe      	b.n	80068f6 <HardFault_Handler+0x4>

080068f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068fc:	e7fe      	b.n	80068fc <MemManage_Handler+0x4>

080068fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068fe:	b480      	push	{r7}
 8006900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006902:	e7fe      	b.n	8006902 <BusFault_Handler+0x4>

08006904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006908:	e7fe      	b.n	8006908 <UsageFault_Handler+0x4>

0800690a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800690a:	b480      	push	{r7}
 800690c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800690e:	bf00      	nop
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800691c:	bf00      	nop
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006926:	b480      	push	{r7}
 8006928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800692a:	bf00      	nop
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006938:	f7fa fba6 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800693c:	bf00      	nop
 800693e:	bd80      	pop	{r7, pc}

08006940 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8006944:	4802      	ldr	r0, [pc, #8]	; (8006950 <DMA1_Channel3_IRQHandler+0x10>)
 8006946:	f7fb f98d 	bl	8001c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000150 	.word	0x20000150

08006954 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006958:	4802      	ldr	r0, [pc, #8]	; (8006964 <TIM2_IRQHandler+0x10>)
 800695a:	f7fd ff5d 	bl	8004818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200001ec 	.word	0x200001ec

08006968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(myButton_Pin);
 800696c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006970:	f7fb fd28 	bl	80023c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006974:	bf00      	nop
 8006976:	bd80      	pop	{r7, pc}

08006978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006980:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <_sbrk+0x5c>)
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <_sbrk+0x60>)
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800698c:	4b13      	ldr	r3, [pc, #76]	; (80069dc <_sbrk+0x64>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006994:	4b11      	ldr	r3, [pc, #68]	; (80069dc <_sbrk+0x64>)
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <_sbrk+0x68>)
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <_sbrk+0x64>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d207      	bcs.n	80069b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069a8:	f000 f89e 	bl	8006ae8 <__errno>
 80069ac:	4603      	mov	r3, r0
 80069ae:	220c      	movs	r2, #12
 80069b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b6:	e009      	b.n	80069cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <_sbrk+0x64>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <_sbrk+0x64>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	4a05      	ldr	r2, [pc, #20]	; (80069dc <_sbrk+0x64>)
 80069c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20018000 	.word	0x20018000
 80069d8:	00000400 	.word	0x00000400
 80069dc:	200004bc 	.word	0x200004bc
 80069e0:	200004d0 	.word	0x200004d0

080069e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <SystemInit+0x20>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ee:	4a05      	ldr	r2, [pc, #20]	; (8006a04 <SystemInit+0x20>)
 80069f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	e000ed00 	.word	0xe000ed00

08006a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006a0c:	f7ff ffea 	bl	80069e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a10:	480c      	ldr	r0, [pc, #48]	; (8006a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a12:	490d      	ldr	r1, [pc, #52]	; (8006a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a14:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <LoopForever+0xe>)
  movs r3, #0
 8006a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a18:	e002      	b.n	8006a20 <LoopCopyDataInit>

08006a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a1e:	3304      	adds	r3, #4

08006a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a24:	d3f9      	bcc.n	8006a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a26:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a28:	4c0a      	ldr	r4, [pc, #40]	; (8006a54 <LoopForever+0x16>)
  movs r3, #0
 8006a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a2c:	e001      	b.n	8006a32 <LoopFillZerobss>

08006a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a30:	3204      	adds	r2, #4

08006a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a34:	d3fb      	bcc.n	8006a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a36:	f000 f85d 	bl	8006af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006a3a:	f7ff f899 	bl	8005b70 <main>

08006a3e <LoopForever>:

LoopForever:
    b LoopForever
 8006a3e:	e7fe      	b.n	8006a3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006a40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a48:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8006a4c:	08007ce8 	.word	0x08007ce8
  ldr r2, =_sbss
 8006a50:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8006a54:	200004d0 	.word	0x200004d0

08006a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006a58:	e7fe      	b.n	8006a58 <ADC1_2_IRQHandler>
	...

08006a5c <arm_sin_f32>:
 8006a5c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006adc <arm_sin_f32+0x80>
 8006a60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006a64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006a70:	d504      	bpl.n	8006a7c <arm_sin_f32+0x20>
 8006a72:	ee17 3a90 	vmov	r3, s15
 8006a76:	3b01      	subs	r3, #1
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a80:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006ae0 <arm_sin_f32+0x84>
 8006a84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006a88:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006a8c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8006a90:	ee17 3a90 	vmov	r3, s15
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9a:	d21a      	bcs.n	8006ad2 <arm_sin_f32+0x76>
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	1c59      	adds	r1, r3, #1
 8006aa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006aaa:	4a0e      	ldr	r2, [pc, #56]	; (8006ae4 <arm_sin_f32+0x88>)
 8006aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ab4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006ab8:	ed93 7a00 	vldr	s14, [r3]
 8006abc:	edd2 6a00 	vldr	s13, [r2]
 8006ac0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006ac4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8006ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006acc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006ad0:	4770      	bx	lr
 8006ad2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e7e6      	b.n	8006aaa <arm_sin_f32+0x4e>
 8006adc:	3e22f983 	.word	0x3e22f983
 8006ae0:	44000000 	.word	0x44000000
 8006ae4:	080074a0 	.word	0x080074a0

08006ae8 <__errno>:
 8006ae8:	4b01      	ldr	r3, [pc, #4]	; (8006af0 <__errno+0x8>)
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	2000004c 	.word	0x2000004c

08006af4 <__libc_init_array>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	4d0d      	ldr	r5, [pc, #52]	; (8006b2c <__libc_init_array+0x38>)
 8006af8:	4c0d      	ldr	r4, [pc, #52]	; (8006b30 <__libc_init_array+0x3c>)
 8006afa:	1b64      	subs	r4, r4, r5
 8006afc:	10a4      	asrs	r4, r4, #2
 8006afe:	2600      	movs	r6, #0
 8006b00:	42a6      	cmp	r6, r4
 8006b02:	d109      	bne.n	8006b18 <__libc_init_array+0x24>
 8006b04:	4d0b      	ldr	r5, [pc, #44]	; (8006b34 <__libc_init_array+0x40>)
 8006b06:	4c0c      	ldr	r4, [pc, #48]	; (8006b38 <__libc_init_array+0x44>)
 8006b08:	f000 fc8e 	bl	8007428 <_init>
 8006b0c:	1b64      	subs	r4, r4, r5
 8006b0e:	10a4      	asrs	r4, r4, #2
 8006b10:	2600      	movs	r6, #0
 8006b12:	42a6      	cmp	r6, r4
 8006b14:	d105      	bne.n	8006b22 <__libc_init_array+0x2e>
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1c:	4798      	blx	r3
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7ee      	b.n	8006b00 <__libc_init_array+0xc>
 8006b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b26:	4798      	blx	r3
 8006b28:	3601      	adds	r6, #1
 8006b2a:	e7f2      	b.n	8006b12 <__libc_init_array+0x1e>
 8006b2c:	08007ce0 	.word	0x08007ce0
 8006b30:	08007ce0 	.word	0x08007ce0
 8006b34:	08007ce0 	.word	0x08007ce0
 8006b38:	08007ce4 	.word	0x08007ce4

08006b3c <memset>:
 8006b3c:	4402      	add	r2, r0
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d100      	bne.n	8006b46 <memset+0xa>
 8006b44:	4770      	bx	lr
 8006b46:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4a:	e7f9      	b.n	8006b40 <memset+0x4>

08006b4c <siprintf>:
 8006b4c:	b40e      	push	{r1, r2, r3}
 8006b4e:	b500      	push	{lr}
 8006b50:	b09c      	sub	sp, #112	; 0x70
 8006b52:	ab1d      	add	r3, sp, #116	; 0x74
 8006b54:	9002      	str	r0, [sp, #8]
 8006b56:	9006      	str	r0, [sp, #24]
 8006b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b5c:	4809      	ldr	r0, [pc, #36]	; (8006b84 <siprintf+0x38>)
 8006b5e:	9107      	str	r1, [sp, #28]
 8006b60:	9104      	str	r1, [sp, #16]
 8006b62:	4909      	ldr	r1, [pc, #36]	; (8006b88 <siprintf+0x3c>)
 8006b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b68:	9105      	str	r1, [sp, #20]
 8006b6a:	6800      	ldr	r0, [r0, #0]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	a902      	add	r1, sp, #8
 8006b70:	f000 f868 	bl	8006c44 <_svfiprintf_r>
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	b01c      	add	sp, #112	; 0x70
 8006b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b80:	b003      	add	sp, #12
 8006b82:	4770      	bx	lr
 8006b84:	2000004c 	.word	0x2000004c
 8006b88:	ffff0208 	.word	0xffff0208

08006b8c <__ssputs_r>:
 8006b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	688e      	ldr	r6, [r1, #8]
 8006b92:	429e      	cmp	r6, r3
 8006b94:	4682      	mov	sl, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	4690      	mov	r8, r2
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	d838      	bhi.n	8006c10 <__ssputs_r+0x84>
 8006b9e:	898a      	ldrh	r2, [r1, #12]
 8006ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba4:	d032      	beq.n	8006c0c <__ssputs_r+0x80>
 8006ba6:	6825      	ldr	r5, [r4, #0]
 8006ba8:	6909      	ldr	r1, [r1, #16]
 8006baa:	eba5 0901 	sub.w	r9, r5, r1
 8006bae:	6965      	ldr	r5, [r4, #20]
 8006bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bb8:	3301      	adds	r3, #1
 8006bba:	444b      	add	r3, r9
 8006bbc:	106d      	asrs	r5, r5, #1
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	bf38      	it	cc
 8006bc2:	461d      	movcc	r5, r3
 8006bc4:	0553      	lsls	r3, r2, #21
 8006bc6:	d531      	bpl.n	8006c2c <__ssputs_r+0xa0>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	f000 fb63 	bl	8007294 <_malloc_r>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	b950      	cbnz	r0, 8006be8 <__ssputs_r+0x5c>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	f8ca 3000 	str.w	r3, [sl]
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be8:	6921      	ldr	r1, [r4, #16]
 8006bea:	464a      	mov	r2, r9
 8006bec:	f000 fabe 	bl	800716c <memcpy>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	6126      	str	r6, [r4, #16]
 8006bfe:	6165      	str	r5, [r4, #20]
 8006c00:	444e      	add	r6, r9
 8006c02:	eba5 0509 	sub.w	r5, r5, r9
 8006c06:	6026      	str	r6, [r4, #0]
 8006c08:	60a5      	str	r5, [r4, #8]
 8006c0a:	463e      	mov	r6, r7
 8006c0c:	42be      	cmp	r6, r7
 8006c0e:	d900      	bls.n	8006c12 <__ssputs_r+0x86>
 8006c10:	463e      	mov	r6, r7
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	4632      	mov	r2, r6
 8006c16:	4641      	mov	r1, r8
 8006c18:	f000 fab6 	bl	8007188 <memmove>
 8006c1c:	68a3      	ldr	r3, [r4, #8]
 8006c1e:	1b9b      	subs	r3, r3, r6
 8006c20:	60a3      	str	r3, [r4, #8]
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	4433      	add	r3, r6
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e7db      	b.n	8006be4 <__ssputs_r+0x58>
 8006c2c:	462a      	mov	r2, r5
 8006c2e:	f000 fba5 	bl	800737c <_realloc_r>
 8006c32:	4606      	mov	r6, r0
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1e1      	bne.n	8006bfc <__ssputs_r+0x70>
 8006c38:	6921      	ldr	r1, [r4, #16]
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f000 fabe 	bl	80071bc <_free_r>
 8006c40:	e7c7      	b.n	8006bd2 <__ssputs_r+0x46>
	...

08006c44 <_svfiprintf_r>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	4698      	mov	r8, r3
 8006c4a:	898b      	ldrh	r3, [r1, #12]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	b09d      	sub	sp, #116	; 0x74
 8006c50:	4607      	mov	r7, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	4614      	mov	r4, r2
 8006c56:	d50e      	bpl.n	8006c76 <_svfiprintf_r+0x32>
 8006c58:	690b      	ldr	r3, [r1, #16]
 8006c5a:	b963      	cbnz	r3, 8006c76 <_svfiprintf_r+0x32>
 8006c5c:	2140      	movs	r1, #64	; 0x40
 8006c5e:	f000 fb19 	bl	8007294 <_malloc_r>
 8006c62:	6028      	str	r0, [r5, #0]
 8006c64:	6128      	str	r0, [r5, #16]
 8006c66:	b920      	cbnz	r0, 8006c72 <_svfiprintf_r+0x2e>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c70:	e0d1      	b.n	8006e16 <_svfiprintf_r+0x1d2>
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	616b      	str	r3, [r5, #20]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7a:	2320      	movs	r3, #32
 8006c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c84:	2330      	movs	r3, #48	; 0x30
 8006c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e30 <_svfiprintf_r+0x1ec>
 8006c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c8e:	f04f 0901 	mov.w	r9, #1
 8006c92:	4623      	mov	r3, r4
 8006c94:	469a      	mov	sl, r3
 8006c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c9a:	b10a      	cbz	r2, 8006ca0 <_svfiprintf_r+0x5c>
 8006c9c:	2a25      	cmp	r2, #37	; 0x25
 8006c9e:	d1f9      	bne.n	8006c94 <_svfiprintf_r+0x50>
 8006ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ca4:	d00b      	beq.n	8006cbe <_svfiprintf_r+0x7a>
 8006ca6:	465b      	mov	r3, fp
 8006ca8:	4622      	mov	r2, r4
 8006caa:	4629      	mov	r1, r5
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff ff6d 	bl	8006b8c <__ssputs_r>
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	f000 80aa 	beq.w	8006e0c <_svfiprintf_r+0x1c8>
 8006cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cba:	445a      	add	r2, fp
 8006cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80a2 	beq.w	8006e0c <_svfiprintf_r+0x1c8>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd2:	f10a 0a01 	add.w	sl, sl, #1
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	9307      	str	r3, [sp, #28]
 8006cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cde:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce0:	4654      	mov	r4, sl
 8006ce2:	2205      	movs	r2, #5
 8006ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ce8:	4851      	ldr	r0, [pc, #324]	; (8006e30 <_svfiprintf_r+0x1ec>)
 8006cea:	f7f9 fa71 	bl	80001d0 <memchr>
 8006cee:	9a04      	ldr	r2, [sp, #16]
 8006cf0:	b9d8      	cbnz	r0, 8006d2a <_svfiprintf_r+0xe6>
 8006cf2:	06d0      	lsls	r0, r2, #27
 8006cf4:	bf44      	itt	mi
 8006cf6:	2320      	movmi	r3, #32
 8006cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cfc:	0711      	lsls	r1, r2, #28
 8006cfe:	bf44      	itt	mi
 8006d00:	232b      	movmi	r3, #43	; 0x2b
 8006d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d06:	f89a 3000 	ldrb.w	r3, [sl]
 8006d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0c:	d015      	beq.n	8006d3a <_svfiprintf_r+0xf6>
 8006d0e:	9a07      	ldr	r2, [sp, #28]
 8006d10:	4654      	mov	r4, sl
 8006d12:	2000      	movs	r0, #0
 8006d14:	f04f 0c0a 	mov.w	ip, #10
 8006d18:	4621      	mov	r1, r4
 8006d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d1e:	3b30      	subs	r3, #48	; 0x30
 8006d20:	2b09      	cmp	r3, #9
 8006d22:	d94e      	bls.n	8006dc2 <_svfiprintf_r+0x17e>
 8006d24:	b1b0      	cbz	r0, 8006d54 <_svfiprintf_r+0x110>
 8006d26:	9207      	str	r2, [sp, #28]
 8006d28:	e014      	b.n	8006d54 <_svfiprintf_r+0x110>
 8006d2a:	eba0 0308 	sub.w	r3, r0, r8
 8006d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d32:	4313      	orrs	r3, r2
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	46a2      	mov	sl, r4
 8006d38:	e7d2      	b.n	8006ce0 <_svfiprintf_r+0x9c>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	1d19      	adds	r1, r3, #4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	9103      	str	r1, [sp, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bfbb      	ittet	lt
 8006d46:	425b      	neglt	r3, r3
 8006d48:	f042 0202 	orrlt.w	r2, r2, #2
 8006d4c:	9307      	strge	r3, [sp, #28]
 8006d4e:	9307      	strlt	r3, [sp, #28]
 8006d50:	bfb8      	it	lt
 8006d52:	9204      	strlt	r2, [sp, #16]
 8006d54:	7823      	ldrb	r3, [r4, #0]
 8006d56:	2b2e      	cmp	r3, #46	; 0x2e
 8006d58:	d10c      	bne.n	8006d74 <_svfiprintf_r+0x130>
 8006d5a:	7863      	ldrb	r3, [r4, #1]
 8006d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5e:	d135      	bne.n	8006dcc <_svfiprintf_r+0x188>
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	1d1a      	adds	r2, r3, #4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	9203      	str	r2, [sp, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bfb8      	it	lt
 8006d6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d70:	3402      	adds	r4, #2
 8006d72:	9305      	str	r3, [sp, #20]
 8006d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e40 <_svfiprintf_r+0x1fc>
 8006d78:	7821      	ldrb	r1, [r4, #0]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	4650      	mov	r0, sl
 8006d7e:	f7f9 fa27 	bl	80001d0 <memchr>
 8006d82:	b140      	cbz	r0, 8006d96 <_svfiprintf_r+0x152>
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	eba0 000a 	sub.w	r0, r0, sl
 8006d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	4303      	orrs	r3, r0
 8006d92:	3401      	adds	r4, #1
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9a:	4826      	ldr	r0, [pc, #152]	; (8006e34 <_svfiprintf_r+0x1f0>)
 8006d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006da0:	2206      	movs	r2, #6
 8006da2:	f7f9 fa15 	bl	80001d0 <memchr>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d038      	beq.n	8006e1c <_svfiprintf_r+0x1d8>
 8006daa:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <_svfiprintf_r+0x1f4>)
 8006dac:	bb1b      	cbnz	r3, 8006df6 <_svfiprintf_r+0x1b2>
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	3307      	adds	r3, #7
 8006db2:	f023 0307 	bic.w	r3, r3, #7
 8006db6:	3308      	adds	r3, #8
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dbc:	4433      	add	r3, r6
 8006dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc0:	e767      	b.n	8006c92 <_svfiprintf_r+0x4e>
 8006dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	2001      	movs	r0, #1
 8006dca:	e7a5      	b.n	8006d18 <_svfiprintf_r+0xd4>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	3401      	adds	r4, #1
 8006dd0:	9305      	str	r3, [sp, #20]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f04f 0c0a 	mov.w	ip, #10
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dde:	3a30      	subs	r2, #48	; 0x30
 8006de0:	2a09      	cmp	r2, #9
 8006de2:	d903      	bls.n	8006dec <_svfiprintf_r+0x1a8>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0c5      	beq.n	8006d74 <_svfiprintf_r+0x130>
 8006de8:	9105      	str	r1, [sp, #20]
 8006dea:	e7c3      	b.n	8006d74 <_svfiprintf_r+0x130>
 8006dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df0:	4604      	mov	r4, r0
 8006df2:	2301      	movs	r3, #1
 8006df4:	e7f0      	b.n	8006dd8 <_svfiprintf_r+0x194>
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <_svfiprintf_r+0x1f8>)
 8006dfe:	a904      	add	r1, sp, #16
 8006e00:	4638      	mov	r0, r7
 8006e02:	f3af 8000 	nop.w
 8006e06:	1c42      	adds	r2, r0, #1
 8006e08:	4606      	mov	r6, r0
 8006e0a:	d1d6      	bne.n	8006dba <_svfiprintf_r+0x176>
 8006e0c:	89ab      	ldrh	r3, [r5, #12]
 8006e0e:	065b      	lsls	r3, r3, #25
 8006e10:	f53f af2c 	bmi.w	8006c6c <_svfiprintf_r+0x28>
 8006e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e16:	b01d      	add	sp, #116	; 0x74
 8006e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1c:	ab03      	add	r3, sp, #12
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <_svfiprintf_r+0x1f8>)
 8006e24:	a904      	add	r1, sp, #16
 8006e26:	4638      	mov	r0, r7
 8006e28:	f000 f87a 	bl	8006f20 <_printf_i>
 8006e2c:	e7eb      	b.n	8006e06 <_svfiprintf_r+0x1c2>
 8006e2e:	bf00      	nop
 8006e30:	08007ca4 	.word	0x08007ca4
 8006e34:	08007cae 	.word	0x08007cae
 8006e38:	00000000 	.word	0x00000000
 8006e3c:	08006b8d 	.word	0x08006b8d
 8006e40:	08007caa 	.word	0x08007caa

08006e44 <_printf_common>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	4616      	mov	r6, r2
 8006e4a:	4699      	mov	r9, r3
 8006e4c:	688a      	ldr	r2, [r1, #8]
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	bfb8      	it	lt
 8006e58:	4613      	movlt	r3, r2
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e60:	4607      	mov	r7, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	b10a      	cbz	r2, 8006e6a <_printf_common+0x26>
 8006e66:	3301      	adds	r3, #1
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	0699      	lsls	r1, r3, #26
 8006e6e:	bf42      	ittt	mi
 8006e70:	6833      	ldrmi	r3, [r6, #0]
 8006e72:	3302      	addmi	r3, #2
 8006e74:	6033      	strmi	r3, [r6, #0]
 8006e76:	6825      	ldr	r5, [r4, #0]
 8006e78:	f015 0506 	ands.w	r5, r5, #6
 8006e7c:	d106      	bne.n	8006e8c <_printf_common+0x48>
 8006e7e:	f104 0a19 	add.w	sl, r4, #25
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc26      	bgt.n	8006eda <_printf_common+0x96>
 8006e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e90:	1e13      	subs	r3, r2, #0
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	bf18      	it	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	0692      	lsls	r2, r2, #26
 8006e9a:	d42b      	bmi.n	8006ef4 <_printf_common+0xb0>
 8006e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c0      	blx	r8
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d01e      	beq.n	8006ee8 <_printf_common+0xa4>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	68e5      	ldr	r5, [r4, #12]
 8006eae:	6832      	ldr	r2, [r6, #0]
 8006eb0:	f003 0306 	and.w	r3, r3, #6
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	bf08      	it	eq
 8006eb8:	1aad      	subeq	r5, r5, r2
 8006eba:	68a3      	ldr	r3, [r4, #8]
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	bf0c      	ite	eq
 8006ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec4:	2500      	movne	r5, #0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfc4      	itt	gt
 8006eca:	1a9b      	subgt	r3, r3, r2
 8006ecc:	18ed      	addgt	r5, r5, r3
 8006ece:	2600      	movs	r6, #0
 8006ed0:	341a      	adds	r4, #26
 8006ed2:	42b5      	cmp	r5, r6
 8006ed4:	d11a      	bne.n	8006f0c <_printf_common+0xc8>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e008      	b.n	8006eec <_printf_common+0xa8>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4652      	mov	r2, sl
 8006ede:	4649      	mov	r1, r9
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	47c0      	blx	r8
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d103      	bne.n	8006ef0 <_printf_common+0xac>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	e7c6      	b.n	8006e82 <_printf_common+0x3e>
 8006ef4:	18e1      	adds	r1, r4, r3
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	2030      	movs	r0, #48	; 0x30
 8006efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006efe:	4422      	add	r2, r4
 8006f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f08:	3302      	adds	r3, #2
 8006f0a:	e7c7      	b.n	8006e9c <_printf_common+0x58>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4622      	mov	r2, r4
 8006f10:	4649      	mov	r1, r9
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c0      	blx	r8
 8006f16:	3001      	adds	r0, #1
 8006f18:	d0e6      	beq.n	8006ee8 <_printf_common+0xa4>
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7d9      	b.n	8006ed2 <_printf_common+0x8e>
	...

08006f20 <_printf_i>:
 8006f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	7e0f      	ldrb	r7, [r1, #24]
 8006f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f28:	2f78      	cmp	r7, #120	; 0x78
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	469a      	mov	sl, r3
 8006f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f36:	d807      	bhi.n	8006f48 <_printf_i+0x28>
 8006f38:	2f62      	cmp	r7, #98	; 0x62
 8006f3a:	d80a      	bhi.n	8006f52 <_printf_i+0x32>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	f000 80d8 	beq.w	80070f2 <_printf_i+0x1d2>
 8006f42:	2f58      	cmp	r7, #88	; 0x58
 8006f44:	f000 80a3 	beq.w	800708e <_printf_i+0x16e>
 8006f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f50:	e03a      	b.n	8006fc8 <_printf_i+0xa8>
 8006f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f56:	2b15      	cmp	r3, #21
 8006f58:	d8f6      	bhi.n	8006f48 <_printf_i+0x28>
 8006f5a:	a101      	add	r1, pc, #4	; (adr r1, 8006f60 <_printf_i+0x40>)
 8006f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f60:	08006fb9 	.word	0x08006fb9
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006f49 	.word	0x08006f49
 8006f6c:	08006f49 	.word	0x08006f49
 8006f70:	08006f49 	.word	0x08006f49
 8006f74:	08006f49 	.word	0x08006f49
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f49 	.word	0x08006f49
 8006f80:	08006f49 	.word	0x08006f49
 8006f84:	08006f49 	.word	0x08006f49
 8006f88:	08006f49 	.word	0x08006f49
 8006f8c:	080070d9 	.word	0x080070d9
 8006f90:	08006ffd 	.word	0x08006ffd
 8006f94:	080070bb 	.word	0x080070bb
 8006f98:	08006f49 	.word	0x08006f49
 8006f9c:	08006f49 	.word	0x08006f49
 8006fa0:	080070fb 	.word	0x080070fb
 8006fa4:	08006f49 	.word	0x08006f49
 8006fa8:	08006ffd 	.word	0x08006ffd
 8006fac:	08006f49 	.word	0x08006f49
 8006fb0:	08006f49 	.word	0x08006f49
 8006fb4:	080070c3 	.word	0x080070c3
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	602a      	str	r2, [r5, #0]
 8006fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0a3      	b.n	8007114 <_printf_i+0x1f4>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	6829      	ldr	r1, [r5, #0]
 8006fd0:	0606      	lsls	r6, r0, #24
 8006fd2:	f101 0304 	add.w	r3, r1, #4
 8006fd6:	d50a      	bpl.n	8006fee <_printf_i+0xce>
 8006fd8:	680e      	ldr	r6, [r1, #0]
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	2e00      	cmp	r6, #0
 8006fde:	da03      	bge.n	8006fe8 <_printf_i+0xc8>
 8006fe0:	232d      	movs	r3, #45	; 0x2d
 8006fe2:	4276      	negs	r6, r6
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe8:	485e      	ldr	r0, [pc, #376]	; (8007164 <_printf_i+0x244>)
 8006fea:	230a      	movs	r3, #10
 8006fec:	e019      	b.n	8007022 <_printf_i+0x102>
 8006fee:	680e      	ldr	r6, [r1, #0]
 8006ff0:	602b      	str	r3, [r5, #0]
 8006ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ff6:	bf18      	it	ne
 8006ff8:	b236      	sxthne	r6, r6
 8006ffa:	e7ef      	b.n	8006fdc <_printf_i+0xbc>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	6820      	ldr	r0, [r4, #0]
 8007000:	1d19      	adds	r1, r3, #4
 8007002:	6029      	str	r1, [r5, #0]
 8007004:	0601      	lsls	r1, r0, #24
 8007006:	d501      	bpl.n	800700c <_printf_i+0xec>
 8007008:	681e      	ldr	r6, [r3, #0]
 800700a:	e002      	b.n	8007012 <_printf_i+0xf2>
 800700c:	0646      	lsls	r6, r0, #25
 800700e:	d5fb      	bpl.n	8007008 <_printf_i+0xe8>
 8007010:	881e      	ldrh	r6, [r3, #0]
 8007012:	4854      	ldr	r0, [pc, #336]	; (8007164 <_printf_i+0x244>)
 8007014:	2f6f      	cmp	r7, #111	; 0x6f
 8007016:	bf0c      	ite	eq
 8007018:	2308      	moveq	r3, #8
 800701a:	230a      	movne	r3, #10
 800701c:	2100      	movs	r1, #0
 800701e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007022:	6865      	ldr	r5, [r4, #4]
 8007024:	60a5      	str	r5, [r4, #8]
 8007026:	2d00      	cmp	r5, #0
 8007028:	bfa2      	ittt	ge
 800702a:	6821      	ldrge	r1, [r4, #0]
 800702c:	f021 0104 	bicge.w	r1, r1, #4
 8007030:	6021      	strge	r1, [r4, #0]
 8007032:	b90e      	cbnz	r6, 8007038 <_printf_i+0x118>
 8007034:	2d00      	cmp	r5, #0
 8007036:	d04d      	beq.n	80070d4 <_printf_i+0x1b4>
 8007038:	4615      	mov	r5, r2
 800703a:	fbb6 f1f3 	udiv	r1, r6, r3
 800703e:	fb03 6711 	mls	r7, r3, r1, r6
 8007042:	5dc7      	ldrb	r7, [r0, r7]
 8007044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007048:	4637      	mov	r7, r6
 800704a:	42bb      	cmp	r3, r7
 800704c:	460e      	mov	r6, r1
 800704e:	d9f4      	bls.n	800703a <_printf_i+0x11a>
 8007050:	2b08      	cmp	r3, #8
 8007052:	d10b      	bne.n	800706c <_printf_i+0x14c>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	07de      	lsls	r6, r3, #31
 8007058:	d508      	bpl.n	800706c <_printf_i+0x14c>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	6861      	ldr	r1, [r4, #4]
 800705e:	4299      	cmp	r1, r3
 8007060:	bfde      	ittt	le
 8007062:	2330      	movle	r3, #48	; 0x30
 8007064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007068:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800706c:	1b52      	subs	r2, r2, r5
 800706e:	6122      	str	r2, [r4, #16]
 8007070:	f8cd a000 	str.w	sl, [sp]
 8007074:	464b      	mov	r3, r9
 8007076:	aa03      	add	r2, sp, #12
 8007078:	4621      	mov	r1, r4
 800707a:	4640      	mov	r0, r8
 800707c:	f7ff fee2 	bl	8006e44 <_printf_common>
 8007080:	3001      	adds	r0, #1
 8007082:	d14c      	bne.n	800711e <_printf_i+0x1fe>
 8007084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007088:	b004      	add	sp, #16
 800708a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708e:	4835      	ldr	r0, [pc, #212]	; (8007164 <_printf_i+0x244>)
 8007090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007094:	6829      	ldr	r1, [r5, #0]
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	f851 6b04 	ldr.w	r6, [r1], #4
 800709c:	6029      	str	r1, [r5, #0]
 800709e:	061d      	lsls	r5, r3, #24
 80070a0:	d514      	bpl.n	80070cc <_printf_i+0x1ac>
 80070a2:	07df      	lsls	r7, r3, #31
 80070a4:	bf44      	itt	mi
 80070a6:	f043 0320 	orrmi.w	r3, r3, #32
 80070aa:	6023      	strmi	r3, [r4, #0]
 80070ac:	b91e      	cbnz	r6, 80070b6 <_printf_i+0x196>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f023 0320 	bic.w	r3, r3, #32
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	2310      	movs	r3, #16
 80070b8:	e7b0      	b.n	800701c <_printf_i+0xfc>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	f043 0320 	orr.w	r3, r3, #32
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	2378      	movs	r3, #120	; 0x78
 80070c4:	4828      	ldr	r0, [pc, #160]	; (8007168 <_printf_i+0x248>)
 80070c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070ca:	e7e3      	b.n	8007094 <_printf_i+0x174>
 80070cc:	0659      	lsls	r1, r3, #25
 80070ce:	bf48      	it	mi
 80070d0:	b2b6      	uxthmi	r6, r6
 80070d2:	e7e6      	b.n	80070a2 <_printf_i+0x182>
 80070d4:	4615      	mov	r5, r2
 80070d6:	e7bb      	b.n	8007050 <_printf_i+0x130>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	6826      	ldr	r6, [r4, #0]
 80070dc:	6961      	ldr	r1, [r4, #20]
 80070de:	1d18      	adds	r0, r3, #4
 80070e0:	6028      	str	r0, [r5, #0]
 80070e2:	0635      	lsls	r5, r6, #24
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0x1cc>
 80070e8:	6019      	str	r1, [r3, #0]
 80070ea:	e002      	b.n	80070f2 <_printf_i+0x1d2>
 80070ec:	0670      	lsls	r0, r6, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0x1c8>
 80070f0:	8019      	strh	r1, [r3, #0]
 80070f2:	2300      	movs	r3, #0
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	4615      	mov	r5, r2
 80070f8:	e7ba      	b.n	8007070 <_printf_i+0x150>
 80070fa:	682b      	ldr	r3, [r5, #0]
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	602a      	str	r2, [r5, #0]
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	2100      	movs	r1, #0
 8007106:	4628      	mov	r0, r5
 8007108:	f7f9 f862 	bl	80001d0 <memchr>
 800710c:	b108      	cbz	r0, 8007112 <_printf_i+0x1f2>
 800710e:	1b40      	subs	r0, r0, r5
 8007110:	6060      	str	r0, [r4, #4]
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	2300      	movs	r3, #0
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800711c:	e7a8      	b.n	8007070 <_printf_i+0x150>
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	462a      	mov	r2, r5
 8007122:	4649      	mov	r1, r9
 8007124:	4640      	mov	r0, r8
 8007126:	47d0      	blx	sl
 8007128:	3001      	adds	r0, #1
 800712a:	d0ab      	beq.n	8007084 <_printf_i+0x164>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	079b      	lsls	r3, r3, #30
 8007130:	d413      	bmi.n	800715a <_printf_i+0x23a>
 8007132:	68e0      	ldr	r0, [r4, #12]
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	4298      	cmp	r0, r3
 8007138:	bfb8      	it	lt
 800713a:	4618      	movlt	r0, r3
 800713c:	e7a4      	b.n	8007088 <_printf_i+0x168>
 800713e:	2301      	movs	r3, #1
 8007140:	4632      	mov	r2, r6
 8007142:	4649      	mov	r1, r9
 8007144:	4640      	mov	r0, r8
 8007146:	47d0      	blx	sl
 8007148:	3001      	adds	r0, #1
 800714a:	d09b      	beq.n	8007084 <_printf_i+0x164>
 800714c:	3501      	adds	r5, #1
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	9903      	ldr	r1, [sp, #12]
 8007152:	1a5b      	subs	r3, r3, r1
 8007154:	42ab      	cmp	r3, r5
 8007156:	dcf2      	bgt.n	800713e <_printf_i+0x21e>
 8007158:	e7eb      	b.n	8007132 <_printf_i+0x212>
 800715a:	2500      	movs	r5, #0
 800715c:	f104 0619 	add.w	r6, r4, #25
 8007160:	e7f5      	b.n	800714e <_printf_i+0x22e>
 8007162:	bf00      	nop
 8007164:	08007cb5 	.word	0x08007cb5
 8007168:	08007cc6 	.word	0x08007cc6

0800716c <memcpy>:
 800716c:	440a      	add	r2, r1
 800716e:	4291      	cmp	r1, r2
 8007170:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007174:	d100      	bne.n	8007178 <memcpy+0xc>
 8007176:	4770      	bx	lr
 8007178:	b510      	push	{r4, lr}
 800717a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007182:	4291      	cmp	r1, r2
 8007184:	d1f9      	bne.n	800717a <memcpy+0xe>
 8007186:	bd10      	pop	{r4, pc}

08007188 <memmove>:
 8007188:	4288      	cmp	r0, r1
 800718a:	b510      	push	{r4, lr}
 800718c:	eb01 0402 	add.w	r4, r1, r2
 8007190:	d902      	bls.n	8007198 <memmove+0x10>
 8007192:	4284      	cmp	r4, r0
 8007194:	4623      	mov	r3, r4
 8007196:	d807      	bhi.n	80071a8 <memmove+0x20>
 8007198:	1e43      	subs	r3, r0, #1
 800719a:	42a1      	cmp	r1, r4
 800719c:	d008      	beq.n	80071b0 <memmove+0x28>
 800719e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071a6:	e7f8      	b.n	800719a <memmove+0x12>
 80071a8:	4402      	add	r2, r0
 80071aa:	4601      	mov	r1, r0
 80071ac:	428a      	cmp	r2, r1
 80071ae:	d100      	bne.n	80071b2 <memmove+0x2a>
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ba:	e7f7      	b.n	80071ac <memmove+0x24>

080071bc <_free_r>:
 80071bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071be:	2900      	cmp	r1, #0
 80071c0:	d044      	beq.n	800724c <_free_r+0x90>
 80071c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c6:	9001      	str	r0, [sp, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f1a1 0404 	sub.w	r4, r1, #4
 80071ce:	bfb8      	it	lt
 80071d0:	18e4      	addlt	r4, r4, r3
 80071d2:	f000 f913 	bl	80073fc <__malloc_lock>
 80071d6:	4a1e      	ldr	r2, [pc, #120]	; (8007250 <_free_r+0x94>)
 80071d8:	9801      	ldr	r0, [sp, #4]
 80071da:	6813      	ldr	r3, [r2, #0]
 80071dc:	b933      	cbnz	r3, 80071ec <_free_r+0x30>
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	6014      	str	r4, [r2, #0]
 80071e2:	b003      	add	sp, #12
 80071e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071e8:	f000 b90e 	b.w	8007408 <__malloc_unlock>
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d908      	bls.n	8007202 <_free_r+0x46>
 80071f0:	6825      	ldr	r5, [r4, #0]
 80071f2:	1961      	adds	r1, r4, r5
 80071f4:	428b      	cmp	r3, r1
 80071f6:	bf01      	itttt	eq
 80071f8:	6819      	ldreq	r1, [r3, #0]
 80071fa:	685b      	ldreq	r3, [r3, #4]
 80071fc:	1949      	addeq	r1, r1, r5
 80071fe:	6021      	streq	r1, [r4, #0]
 8007200:	e7ed      	b.n	80071de <_free_r+0x22>
 8007202:	461a      	mov	r2, r3
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	b10b      	cbz	r3, 800720c <_free_r+0x50>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d9fa      	bls.n	8007202 <_free_r+0x46>
 800720c:	6811      	ldr	r1, [r2, #0]
 800720e:	1855      	adds	r5, r2, r1
 8007210:	42a5      	cmp	r5, r4
 8007212:	d10b      	bne.n	800722c <_free_r+0x70>
 8007214:	6824      	ldr	r4, [r4, #0]
 8007216:	4421      	add	r1, r4
 8007218:	1854      	adds	r4, r2, r1
 800721a:	42a3      	cmp	r3, r4
 800721c:	6011      	str	r1, [r2, #0]
 800721e:	d1e0      	bne.n	80071e2 <_free_r+0x26>
 8007220:	681c      	ldr	r4, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	6053      	str	r3, [r2, #4]
 8007226:	4421      	add	r1, r4
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	e7da      	b.n	80071e2 <_free_r+0x26>
 800722c:	d902      	bls.n	8007234 <_free_r+0x78>
 800722e:	230c      	movs	r3, #12
 8007230:	6003      	str	r3, [r0, #0]
 8007232:	e7d6      	b.n	80071e2 <_free_r+0x26>
 8007234:	6825      	ldr	r5, [r4, #0]
 8007236:	1961      	adds	r1, r4, r5
 8007238:	428b      	cmp	r3, r1
 800723a:	bf04      	itt	eq
 800723c:	6819      	ldreq	r1, [r3, #0]
 800723e:	685b      	ldreq	r3, [r3, #4]
 8007240:	6063      	str	r3, [r4, #4]
 8007242:	bf04      	itt	eq
 8007244:	1949      	addeq	r1, r1, r5
 8007246:	6021      	streq	r1, [r4, #0]
 8007248:	6054      	str	r4, [r2, #4]
 800724a:	e7ca      	b.n	80071e2 <_free_r+0x26>
 800724c:	b003      	add	sp, #12
 800724e:	bd30      	pop	{r4, r5, pc}
 8007250:	200004c0 	.word	0x200004c0

08007254 <sbrk_aligned>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	4e0e      	ldr	r6, [pc, #56]	; (8007290 <sbrk_aligned+0x3c>)
 8007258:	460c      	mov	r4, r1
 800725a:	6831      	ldr	r1, [r6, #0]
 800725c:	4605      	mov	r5, r0
 800725e:	b911      	cbnz	r1, 8007266 <sbrk_aligned+0x12>
 8007260:	f000 f8bc 	bl	80073dc <_sbrk_r>
 8007264:	6030      	str	r0, [r6, #0]
 8007266:	4621      	mov	r1, r4
 8007268:	4628      	mov	r0, r5
 800726a:	f000 f8b7 	bl	80073dc <_sbrk_r>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	d00a      	beq.n	8007288 <sbrk_aligned+0x34>
 8007272:	1cc4      	adds	r4, r0, #3
 8007274:	f024 0403 	bic.w	r4, r4, #3
 8007278:	42a0      	cmp	r0, r4
 800727a:	d007      	beq.n	800728c <sbrk_aligned+0x38>
 800727c:	1a21      	subs	r1, r4, r0
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f8ac 	bl	80073dc <_sbrk_r>
 8007284:	3001      	adds	r0, #1
 8007286:	d101      	bne.n	800728c <sbrk_aligned+0x38>
 8007288:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800728c:	4620      	mov	r0, r4
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	200004c4 	.word	0x200004c4

08007294 <_malloc_r>:
 8007294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007298:	1ccd      	adds	r5, r1, #3
 800729a:	f025 0503 	bic.w	r5, r5, #3
 800729e:	3508      	adds	r5, #8
 80072a0:	2d0c      	cmp	r5, #12
 80072a2:	bf38      	it	cc
 80072a4:	250c      	movcc	r5, #12
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	4607      	mov	r7, r0
 80072aa:	db01      	blt.n	80072b0 <_malloc_r+0x1c>
 80072ac:	42a9      	cmp	r1, r5
 80072ae:	d905      	bls.n	80072bc <_malloc_r+0x28>
 80072b0:	230c      	movs	r3, #12
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	2600      	movs	r6, #0
 80072b6:	4630      	mov	r0, r6
 80072b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072bc:	4e2e      	ldr	r6, [pc, #184]	; (8007378 <_malloc_r+0xe4>)
 80072be:	f000 f89d 	bl	80073fc <__malloc_lock>
 80072c2:	6833      	ldr	r3, [r6, #0]
 80072c4:	461c      	mov	r4, r3
 80072c6:	bb34      	cbnz	r4, 8007316 <_malloc_r+0x82>
 80072c8:	4629      	mov	r1, r5
 80072ca:	4638      	mov	r0, r7
 80072cc:	f7ff ffc2 	bl	8007254 <sbrk_aligned>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	4604      	mov	r4, r0
 80072d4:	d14d      	bne.n	8007372 <_malloc_r+0xde>
 80072d6:	6834      	ldr	r4, [r6, #0]
 80072d8:	4626      	mov	r6, r4
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d140      	bne.n	8007360 <_malloc_r+0xcc>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	4631      	mov	r1, r6
 80072e2:	4638      	mov	r0, r7
 80072e4:	eb04 0803 	add.w	r8, r4, r3
 80072e8:	f000 f878 	bl	80073dc <_sbrk_r>
 80072ec:	4580      	cmp	r8, r0
 80072ee:	d13a      	bne.n	8007366 <_malloc_r+0xd2>
 80072f0:	6821      	ldr	r1, [r4, #0]
 80072f2:	3503      	adds	r5, #3
 80072f4:	1a6d      	subs	r5, r5, r1
 80072f6:	f025 0503 	bic.w	r5, r5, #3
 80072fa:	3508      	adds	r5, #8
 80072fc:	2d0c      	cmp	r5, #12
 80072fe:	bf38      	it	cc
 8007300:	250c      	movcc	r5, #12
 8007302:	4629      	mov	r1, r5
 8007304:	4638      	mov	r0, r7
 8007306:	f7ff ffa5 	bl	8007254 <sbrk_aligned>
 800730a:	3001      	adds	r0, #1
 800730c:	d02b      	beq.n	8007366 <_malloc_r+0xd2>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	442b      	add	r3, r5
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	e00e      	b.n	8007334 <_malloc_r+0xa0>
 8007316:	6822      	ldr	r2, [r4, #0]
 8007318:	1b52      	subs	r2, r2, r5
 800731a:	d41e      	bmi.n	800735a <_malloc_r+0xc6>
 800731c:	2a0b      	cmp	r2, #11
 800731e:	d916      	bls.n	800734e <_malloc_r+0xba>
 8007320:	1961      	adds	r1, r4, r5
 8007322:	42a3      	cmp	r3, r4
 8007324:	6025      	str	r5, [r4, #0]
 8007326:	bf18      	it	ne
 8007328:	6059      	strne	r1, [r3, #4]
 800732a:	6863      	ldr	r3, [r4, #4]
 800732c:	bf08      	it	eq
 800732e:	6031      	streq	r1, [r6, #0]
 8007330:	5162      	str	r2, [r4, r5]
 8007332:	604b      	str	r3, [r1, #4]
 8007334:	4638      	mov	r0, r7
 8007336:	f104 060b 	add.w	r6, r4, #11
 800733a:	f000 f865 	bl	8007408 <__malloc_unlock>
 800733e:	f026 0607 	bic.w	r6, r6, #7
 8007342:	1d23      	adds	r3, r4, #4
 8007344:	1af2      	subs	r2, r6, r3
 8007346:	d0b6      	beq.n	80072b6 <_malloc_r+0x22>
 8007348:	1b9b      	subs	r3, r3, r6
 800734a:	50a3      	str	r3, [r4, r2]
 800734c:	e7b3      	b.n	80072b6 <_malloc_r+0x22>
 800734e:	6862      	ldr	r2, [r4, #4]
 8007350:	42a3      	cmp	r3, r4
 8007352:	bf0c      	ite	eq
 8007354:	6032      	streq	r2, [r6, #0]
 8007356:	605a      	strne	r2, [r3, #4]
 8007358:	e7ec      	b.n	8007334 <_malloc_r+0xa0>
 800735a:	4623      	mov	r3, r4
 800735c:	6864      	ldr	r4, [r4, #4]
 800735e:	e7b2      	b.n	80072c6 <_malloc_r+0x32>
 8007360:	4634      	mov	r4, r6
 8007362:	6876      	ldr	r6, [r6, #4]
 8007364:	e7b9      	b.n	80072da <_malloc_r+0x46>
 8007366:	230c      	movs	r3, #12
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	4638      	mov	r0, r7
 800736c:	f000 f84c 	bl	8007408 <__malloc_unlock>
 8007370:	e7a1      	b.n	80072b6 <_malloc_r+0x22>
 8007372:	6025      	str	r5, [r4, #0]
 8007374:	e7de      	b.n	8007334 <_malloc_r+0xa0>
 8007376:	bf00      	nop
 8007378:	200004c0 	.word	0x200004c0

0800737c <_realloc_r>:
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	4680      	mov	r8, r0
 8007382:	4614      	mov	r4, r2
 8007384:	460e      	mov	r6, r1
 8007386:	b921      	cbnz	r1, 8007392 <_realloc_r+0x16>
 8007388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800738c:	4611      	mov	r1, r2
 800738e:	f7ff bf81 	b.w	8007294 <_malloc_r>
 8007392:	b92a      	cbnz	r2, 80073a0 <_realloc_r+0x24>
 8007394:	f7ff ff12 	bl	80071bc <_free_r>
 8007398:	4625      	mov	r5, r4
 800739a:	4628      	mov	r0, r5
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	f000 f838 	bl	8007414 <_malloc_usable_size_r>
 80073a4:	4284      	cmp	r4, r0
 80073a6:	4607      	mov	r7, r0
 80073a8:	d802      	bhi.n	80073b0 <_realloc_r+0x34>
 80073aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ae:	d812      	bhi.n	80073d6 <_realloc_r+0x5a>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4640      	mov	r0, r8
 80073b4:	f7ff ff6e 	bl	8007294 <_malloc_r>
 80073b8:	4605      	mov	r5, r0
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d0ed      	beq.n	800739a <_realloc_r+0x1e>
 80073be:	42bc      	cmp	r4, r7
 80073c0:	4622      	mov	r2, r4
 80073c2:	4631      	mov	r1, r6
 80073c4:	bf28      	it	cs
 80073c6:	463a      	movcs	r2, r7
 80073c8:	f7ff fed0 	bl	800716c <memcpy>
 80073cc:	4631      	mov	r1, r6
 80073ce:	4640      	mov	r0, r8
 80073d0:	f7ff fef4 	bl	80071bc <_free_r>
 80073d4:	e7e1      	b.n	800739a <_realloc_r+0x1e>
 80073d6:	4635      	mov	r5, r6
 80073d8:	e7df      	b.n	800739a <_realloc_r+0x1e>
	...

080073dc <_sbrk_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d06      	ldr	r5, [pc, #24]	; (80073f8 <_sbrk_r+0x1c>)
 80073e0:	2300      	movs	r3, #0
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	f7ff fac6 	bl	8006978 <_sbrk>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_sbrk_r+0x1a>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_sbrk_r+0x1a>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	200004c8 	.word	0x200004c8

080073fc <__malloc_lock>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__malloc_lock+0x8>)
 80073fe:	f000 b811 	b.w	8007424 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	200004cc 	.word	0x200004cc

08007408 <__malloc_unlock>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__malloc_unlock+0x8>)
 800740a:	f000 b80c 	b.w	8007426 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	200004cc 	.word	0x200004cc

08007414 <_malloc_usable_size_r>:
 8007414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007418:	1f18      	subs	r0, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfbc      	itt	lt
 800741e:	580b      	ldrlt	r3, [r1, r0]
 8007420:	18c0      	addlt	r0, r0, r3
 8007422:	4770      	bx	lr

08007424 <__retarget_lock_acquire_recursive>:
 8007424:	4770      	bx	lr

08007426 <__retarget_lock_release_recursive>:
 8007426:	4770      	bx	lr

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
